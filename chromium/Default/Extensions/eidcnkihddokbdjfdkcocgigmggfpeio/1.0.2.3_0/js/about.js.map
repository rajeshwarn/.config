{"version":3,"sources":["app/about.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"build\\js\\about.js","sourcesContent":["(function () {\r\n\r\n    var closeBtn = document.getElementById('close_btn');\r\n    var version = document.getElementById('version');\r\n\r\n    if (window.chrome && window.chrome.app.window) {\r\n        version.textContent = 'version ' + chrome.runtime.getManifest().version;\r\n        chrome.storage.local.get(\"config\", function (result) {\r\n            var config = result.config;\r\n            var link = document.createElement('link');\r\n            link.setAttribute('rel', 'stylesheet');\r\n\r\n            if (config && config.settings && config.settings.theme) {\r\n                link.href = \"css/\" + config.settings.theme;\r\n            } else {\r\n\r\n                link.href = \"css/primary.css\";\r\n            }\r\n            document.head.appendChild(link);\r\n        });\r\n\r\n    } else if (window.process && window.process.type) {\r\n\r\n        var pjson = require('./manifest.json');\r\n        version.textContent = 'version ' + pjson.version;\r\n\r\n        var link = document.createElement('link');\r\n        link.href = \"css/primary.css\";\r\n        link.setAttribute('rel', 'stylesheet');\r\n        try {\r\n            var config = JSON.parse(localStorage.getItem(\"config\")).config;\r\n            if (config && config.settings && config.settings.theme) {\r\n                link.href = \"css/\" + config.settings.theme;\r\n            }\r\n        } catch (e) {\r\n            link.href = \"css/primary.css\";\r\n        }\r\n        document.head.appendChild(link);\r\n    }\r\n    closeBtn.addEventListener('click', function () {\r\n        if (window.chrome && window.chrome.app.window) {\r\n            chrome.app.window.current().close();\r\n        } else if (window.process && window.process.type) {\r\n            const remote = require('electron').remote;\r\n            var currentWindow = remote.getCurrentWindow();\r\n            currentWindow.close();\r\n        }\r\n    });\r\n    var updateInfo = document.getElementById('update_info');\r\n  if(window.process && window.process.type) {\r\n        //$http.get(`${ROOT_URL}api/UpdateApi?version=${appVersion}`).then(function (result) {\r\n        const ROOT_URL =  \"http://www.salmonplayer.com/\";\r\n        var pjson = require('./manifest.json');\r\n                    \r\n        var r = new XMLHttpRequest();\r\n        var updateBtn = document.getElementById('update_btn');\r\n        \r\n        r.open(\"GET\", `${ROOT_URL}api/UpdateApi?version=${pjson.version}`, true);\r\n        r.onload = function (e) {\r\n            if(r.response) {\r\n                updateData = JSON.parse(r.response);\r\n                updateInfo.textContent = \"Salmon Player v\" + updateData.VersionString + \" is available for download\";\r\n                updateBtn.style.display = \"\";\r\n                updateBtn.onclick = function() {\r\n                    var shell = require(\"electron\").shell;\r\n                    shell.openExternal(ROOT_URL + 'File/Update?currentVersion='+pjson.version);\r\n                    const app = require('electron').remote.app;\r\n                    app.quit();\r\n                }\r\n            } else {\r\n                updateInfo.textContent = \"Salmon Player is up to date\";\r\n            }\r\n            \r\n\r\n        }\r\n        r.send();\r\n    } else {\r\n        updateInfo.style.display = \"none\";\r\n    }\r\n})()\r\n"]}