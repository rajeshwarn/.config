{"version":3,"sources":["app/app.js","app/controls/grid_view/gridContextMenuCtrl.js","app/controls/grid_view/gridView.js","app/controls/seeker/seeker.js","app/controls/tooltip/spTooltipCtrl.js","app/controls/track_list/listContextMenuCtrl.js","app/controls/track_list/trackList.js","app/controls/volume/volume.js","app/directives/dragDrop.js","app/directives/scrollbarRoot.js","app/directives/spRightClick.js","app/directives/spStick.js","app/lib/album.js","app/lib/artist.js","app/lib/cloud.js","app/lib/directory.js","app/lib/entry.js","app/lib/file.js","app/lib/playlist.js","app/lib/track.js","app/services/chromeFileSystem.js","app/services/chromeStorage.js","app/services/chromeWindowManager.js","app/services/configFactory.js","app/services/dbConnection/dbContext.js","app/services/dbConnection/playlistsRepository.js","app/services/dbConnection/queueRepository.js","app/services/dbConnection/tracksRepository.js","app/services/desktopFileSystem.js","app/services/desktopWindowManager.js","app/services/dialog.js","app/services/dialogManager.js","app/services/dimensionService.js","app/services/fileSystem.js","app/services/guid.js","app/services/html5FileSystem.js","app/services/html5Storage.js","app/services/library.js","app/services/loader.js","app/services/mediaSources.js","app/services/mediaStorages/dropbox.js","app/services/mediaStorages/dropbox/Dropbox.js","app/services/mediaStorages/dropbox/DropboxChrome.js","app/services/mediaStorages/dropbox/DropboxDesktop.js","app/services/mediaStorages/googleDrive.js","app/services/mediaStorages/googleDrive/GDrive.js","app/services/mediaStorages/googleDrive/GDriveChrome.js","app/services/mediaStorages/googleDrive/GDriveDesktop.js","app/services/mediaStorages/localStorage.js","app/services/mediaStorages/oneDrive.js","app/services/mediaStorages/oneDrive/OneDrive.js","app/services/mediaStorages/oneDrive/OneDriveChrome.js","app/services/mediaStorages/oneDrive/OneDriveDesktop.js","app/services/mediaStorages/spotify.js","app/services/mediaStorages/vkontakte.js","app/services/mediaStorages/vkontakte/Vkontakte.js","app/services/mediaStorages/vkontakte/VkontakteChrome.js","app/services/mediaStorages/vkontakte/VkontakteDesktop.js","app/services/platform.js","app/services/player.js","app/services/searchService.js","app/services/storage.js","app/services/toast.js","app/services/uidService.js","app/services/updateService.js","app/services/windowManager.js","app/utils/effects.js","app/utils/filters.js","app/views/albums/albumCtrl.js","app/views/albums/albumsCtrl.js","app/views/appCtrl.js","app/views/artists/artistCtrl.js","app/views/artists/artistsCtrl.js","app/views/clouds/cloudCtrl.js","app/views/clouds/cloudsCtrl.js","app/views/mediaSources/mediaSourcesCtrl.js","app/views/menu/menuCtrl.js","app/views/now_playing/nowPlayingCtrl.js","app/views/playback/playbackCtrl.js","app/views/playlists/createNewPlaylistCtrl.js","app/views/playlists/playlistCtrl.js","app/views/playlists/playlistsCtrl.js","app/views/queue/queueCtrl.js","app/views/quickActions/quickActionsCtrl.js","app/views/search/searchCtrl.js","app/views/settings/settingsCtrl.js","app/views/songs/songsCtrl.js","app/views/tab/tabCtrl.js","app/views/update/updateDialogCtrl.js"],"names":[],"mappingshxhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CChprPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCtnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/iBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCzzdzzdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCtnLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CChvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCrvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CClDA;AACA;AACA;AACA;AACA;AACA;AACA;CCNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;CCjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"build\\js\\app.js","sourcesContent":["angular.module(\"sp-app\", ['templates']);","angular.module('sp-app').controller('gridContextMenuCtrl', function($scope, library, dialogManager, $rootScope, player) {\r\n    // $scope.navigator.openMainMenu = false;\r\n})\r\n","/// <reference path=\"../../../vendor/angular/angular.js\" />\r\nangular.module('sp-app').directive('gridView', function($filter, library) {\r\n    return {\r\n        scope: {\r\n            items: \"=?\",\r\n            itemApi: \"=\"\r\n        },\r\n        restrict: 'AE',\r\n        replace: true,\r\n        templateUrl: 'app/controls/grid_view/gridView.html',\r\n        link: function($scope, $elem, $attrs) {\r\n            $scope.onDblClick = function(item) {\r\n                if (!document.querySelector('.contextmenu')) {\r\n                    if ($scope.itemApi) {\r\n                        $scope.itemApi.open(item);\r\n                    }\r\n                }\r\n\r\n            }\r\n            $scope.getArtStyles = function(album) {\r\n\r\n                var styles = {};\r\n                if (album && album.albumArtPath) {\r\n                    styles = {\r\n                        'background-image': 'url(' + album.albumArtPath + ')'\r\n                    };\r\n                }\r\n\r\n                return styles;\r\n            }\r\n            $scope.criteriaMatch = function() {               \r\n                if ($scope.itemApi.filter) {\r\n                    var result = $scope.itemApi.filter();                    \r\n                    if(result) {\r\n                        return function(item) {\r\n                            return _.find(result, item);\r\n                        }\r\n                    }                    \r\n                }\r\n                \r\n            }\r\n        }\r\n    }\r\n});\r\n","angular.module('sp-app').directive('seeker', function(player, $filter) {\r\n    return {\r\n        replace: true,\r\n        templateUrl: 'app/controls/seeker/seeker.html',\r\n        link: function($scope, $elem, $attrs) {\r\n            var line, handler, progress;\r\n            var initX;\r\n            var logicalPercent;\r\n            var isSeek = false;\r\n            line = document.querySelector('#line');\r\n            handler = document.querySelector('.handler');\r\n            progress = document.querySelector('#seek-progress');\r\n            \r\n\r\n            handler.style.left = line.offsetLeft + 'px';\r\n\r\n            handler.addEventListener('mousedown', onMouseDown);\r\n            line.addEventListener('mousedown', function(e) {\r\n                //   var y = (e.offsetY + line.offsetTop) - handler.offsetHeight / 2;(e.offsetX + line.offsetLeft)- handler.offsetHeight / 2\r\n                var x = (e.offsetX + line.offsetLeft) - handler.offsetHeight / 2;\r\n                moveHandler(x);\r\n                onMouseDown(e);\r\n\r\n            });\r\n            var curPos = 0,\r\n                curPercent;\r\n            player.onTimeUpdate(function() {\r\n                if (!isSeek) {\r\n                    curPos = player.getCurrentTime();\r\n                    \r\n                    curPercent = 100 * curPos / player.getDuration();\r\n                    var currentLeft = (line.offsetWidth - handler.offsetWidth) * curPercent / 100;\r\n                    currentLeft += line.offsetLeft;\r\n                    moveHandler(currentLeft);\r\n\r\n                }\r\n            });\r\n\r\n            function moveHandler(left) {\r\n\r\n\r\n                var leftBound = line.offsetLeft;\r\n                var rightBound = line.offsetLeft + line.offsetWidth - handler.offsetWidth;\r\n                if (left < line.offsetLeft) left = leftBound;\r\n                if (left > rightBound) left = rightBound;\r\n                var parentWidth = handler.parentElement.offsetWidth;\r\n                var physicalPercent = 100 * left / parentWidth;\r\n                handler.style.left = physicalPercent + '%';\r\n                var logicalWidth = line.offsetWidth - handler.offsetWidth;\r\n                var logicalDiff = left - line.offsetLeft;\r\n                logicalPercent = 100 * logicalDiff / logicalWidth;\r\n                progress.style.width = physicalPercent + '%';\r\n\r\n            }\r\n\r\n            function onMouseDown(e) {\r\n                isSeek = true;\r\n                initX = e.pageX - handler.offsetLeft;\r\n                document.body.addEventListener('mousemove', onMouseMove);\r\n                document.body.addEventListener('mouseup', onMouseUp);\r\n            }\r\n\r\n            function onMouseMove(e) {\r\n\r\n                e.preventDefault();\r\n                var x = e.pageX;\r\n                var left = (x - initX);\r\n                moveHandler(left);\r\n\r\n            }\r\n\r\n            function onMouseUp(e) {\r\n                isSeek = false;\r\n                document.body.removeEventListener('mousemove', onMouseMove);\r\n                document.body.removeEventListener('mouseup', onMouseUp);\r\n                player.setCurrentTime(logicalPercent);\r\n            }\r\n        }\r\n    }\r\n});\r\n","angular.module('sp-app').directive('spTooltip', function($interpolate, dialogManager, $timeout) {\r\n\r\n    return {\r\n        link: function($scope, $elem, $attrs) {\r\n            var tooltipExp;\r\n            var tooltipTemplateExp;\r\n            var childScope;\r\n\r\n            var tooltip;\r\n            var position = \"bottom\";\r\n            var deferred;\r\n            var autoCloseTimeout;\r\n            $scope.$watch(function() {\r\n                return $attrs.spTooltip\r\n            }, function(newVal, oldVal) {\r\n                if (newVal != oldVal && childScope) {\r\n                    if ($attrs.spTooltipUpdate) {\r\n                        stopPopup();\r\n                    }\r\n                    childScope.spTooltip = $interpolate($attrs.spTooltip)($scope);\r\n                }\r\n            })\r\n\r\n            function startPopup() {\r\n                // stopPopup();\r\n                childScope = $scope.$new();\r\n                if ($attrs.spTooltip) {\r\n                    childScope.spTooltip = $interpolate($attrs.spTooltip)($scope);\r\n                } else {\r\n                    childScope.spTooltip = '';\r\n                }\r\n                if ($attrs.spTooltipPosition) {\r\n                    position = $attrs.spTooltipPosition;\r\n                }\r\n                var elemPosition = $elem[0].getBoundingClientRect();\r\n                deferred = $timeout(function() {\r\n                    tooltip = dialogManager.openDialog({\r\n                        template: \"app/controls/tooltip/spTooltip.html\",\r\n                        scope: childScope,\r\n                        alignElement: $elem[0],\r\n                        alignPosition: position,\r\n                        autoClose: false\r\n                    });\r\n                }, 200);\r\n\r\n\r\n            }\r\n\r\n            function stopPopup() {\r\n                if (deferred) {\r\n                    $timeout.cancel(deferred);\r\n                }\r\n                if (tooltip) {\r\n                    tooltip.destroy();\r\n                }\r\n                deferred = undefined;\r\n                if (autoCloseTimeout) {\r\n                    clearTimeout(autoCloseTimeout);\r\n                    autoCloseTimeout = undefined;\r\n                }\r\n            }\r\n            $elem[0].addEventListener(\"mouseenter\", function($event) {\r\n                $event.stopPropagation();\r\n                startPopup();\r\n                autoCloseTimeout = setTimeout(function() {\r\n\r\n                    stopPopup();\r\n                }, 5000)\r\n            });\r\n            $elem[0].addEventListener(\"mouseleave\", function() {\r\n                stopPopup();\r\n            });\r\n\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').controller('listContextMenuCtrl', function ($scope, library, dialogManager, $rootScope, player) {\r\n    $scope.playlists = library.getPlaylists();\r\n    $scope.navigator.openMainMenu = false;\r\n    $scope.goToAlbum = function (track) {\r\n        library.setOpenAlbum(track.album);\r\n        $scope.navigator.openAlbum = true;\r\n    }\r\n    $scope.addToQueue = function (track) {\r\n        library.addToQueue(track);\r\n    }\r\n    $scope.addToPlaylist = function (track, playlist) {\r\n        library.addToPlaylist(track, playlist);\r\n    }\r\n    $scope.removeFromQueue = function (track) {\r\n        library.removeFromQueue(track);\r\n    }\r\n    $scope.clearQueue = function () {\r\n        library.clearQueue();\r\n    }\r\n    $scope.stopTrack = function () {\r\n\r\n    }\r\n    $scope.isPlaying = function (track) {\r\n\r\n        return track === library.getCurrentTrack();\r\n    }\r\n    $scope.createPlaylist = function (track) {\r\n\r\n        var scope = $rootScope.$new();\r\n        scope.selectedTrack = track;\r\n        dialogManager.openDialog({\r\n            template: \"app/views/playlists/createNewPlaylist.html\",\r\n\r\n            scope: scope,\r\n            autoClose: false,\r\n            backDrop: true\r\n        });\r\n    }\r\n\r\n})\r\n","/// <reference path=\"../../../vendor/angular/angular.js\" />\r\nangular.module('sp-app').directive('trackList', function(effects, library, dialogManager, $rootScope, player, $filter) {\r\n    return {\r\n        scope: {\r\n            items: \"=?\",\r\n            itemApi: \"=\",\r\n            stick: \"=\"\r\n        },\r\n        restrict: 'AE',\r\n        replace: true,\r\n        require: '?^^scrollbarRoot',\r\n        templateUrl: 'app/controls/track_list/trackList.html',\r\n        link: function($scope, $elem, $attrs, $scrollbarRoot) {\r\n            \r\n            var elem = $elem[0];\r\n            var parentElement = null;\r\n            const ITEM_HEIGHT = 50;\r\n\r\n            function updateScrollbar() {\r\n                if (!$scope.items) {\r\n                    return;\r\n                }\r\n                var height = $scope.items.length * ITEM_HEIGHT;\r\n                elem.style.height = height + \"px\";\r\n\r\n                var parentHeight = parentElement.offsetHeight;\r\n                var scrollTop = parentElement.scrollTop;\r\n\r\n                var skipStart = Math.round(scrollTop / ITEM_HEIGHT);\r\n                var skipEnd = skipStart + Math.round(parentHeight / ITEM_HEIGHT);\r\n\r\n                // console.log(skipStart, skipEnd);\r\n                if (skipStart >= 2) {\r\n                    elem.style.paddingTop = (skipStart - 2) * ITEM_HEIGHT + \"px\";\r\n                    elem.style.height = elem.style.offsetHeight - (skipStart - 2) * ITEM_HEIGHT + \"px\";\r\n                } else {\r\n                    elem.style.paddingTop = \"\";\r\n                }\r\n                if (skipEnd == 0) {\r\n                    skipEnd = elem.children.length + 2;\r\n                }\r\n                for (var i = 0; i < elem.children.length; i++) {\r\n\r\n                    if (i < skipStart - 2 || i > skipEnd + 2) {\r\n                        elem.children[i].style.display = \"none\";\r\n\r\n                    } else {\r\n                        elem.children[i].style.display = \"\";\r\n\r\n\r\n                    }\r\n                }\r\n            }\r\n            if ($scrollbarRoot) {\r\n                parentElement = $scrollbarRoot.getElement();\r\n                $scope.$watch(function() {\r\n                    if (Array.isArray($scope.items)) {\r\n                        return $scope.items.length;\r\n                    }\r\n\r\n                }, function(newVal, oldVal) {\r\n                    if (newVal != undefined && (newVal != oldVal)) {\r\n                        updateScrollbar();\r\n                    }\r\n                })\r\n\r\n                $scrollbarRoot.onScroll(function(e) {\r\n\r\n                    updateScrollbar(e.target);\r\n\r\n                })\r\n                $scope.$on('window-resize', function() {\r\n                    updateScrollbar();\r\n                })\r\n            }\r\n\r\n            if ($scope.itemApi && $scope.itemApi.incomingEvent) {\r\n\r\n                $scope.$on('search-key-down', function() {\r\n                    if ($scope.items.length != 0) {\r\n                        $elem[0].querySelector('.list_view_item').focus();\r\n\r\n                        $scope.selectTrack($scope.items[0]);\r\n                    }\r\n                })\r\n            }\r\n            var selectedTrack = null;\r\n\r\n            $scope.selectTrack = function(track, $event) {\r\n                $elem[0].focus();\r\n                selectedTrack = track;\r\n                var elem = null;\r\n                if ($event) {\r\n                    if ($event.target.tagName === 'SPAN' || $event.target.classList.contains('eq_cont')) {\r\n                        elem = $event.target.parentNode;\r\n                    } else {\r\n                        elem = $event.target;\r\n                    }\r\n\r\n                    effects.ripple(elem, $event.clientX, $event.clientY);\r\n                }\r\n\r\n\r\n                var selectedIndex = $scope.items.indexOf(selectedTrack);\r\n                var domElement = $elem[0];\r\n\r\n                var selectedIndexOffsetTop = selectedIndex * ITEM_HEIGHT;\r\n\r\n                if (selectedIndexOffsetTop - domElement.parentElement.parentElement.scrollTop > domElement.parentElement.parentElement.offsetHeight - ITEM_HEIGHT) {\r\n                    domElement.parentElement.parentElement.scrollTop = selectedIndexOffsetTop;\r\n                }\r\n                if (selectedIndexOffsetTop - domElement.parentElement.parentElement.scrollTop < 0) {\r\n                    domElement.parentElement.parentElement.scrollTop = selectedIndexOffsetTop;\r\n                }\r\n            }\r\n            $scope.criteriaMatch = function() {\r\n\r\n                if ($scope.itemApi.filter) {\r\n                    var result = $scope.itemApi.filter();                    \r\n                    if(result) {\r\n                        return function(item) {\r\n                            return _.find(result, item);\r\n                        }\r\n                    }                    \r\n                }\r\n\r\n            }\r\n            $scope.isSelected = function(track) {\r\n                return track === selectedTrack;\r\n            }\r\n            $scope.playTrack = function(track) {\r\n\r\n                library.playTrack(track);\r\n                if (library.getQueue() != $scope.items) {\r\n                    library.setQueue($scope.items);\r\n                }\r\n            }\r\n\r\n\r\n\r\n            $scope.isPlaying = function(track) {\r\n\r\n                return track === library.getCurrentTrack();\r\n            }\r\n\r\n            $elem[0].addEventListener(\"keydown\", function(e) {\r\n                var selectedTrackIndex = $scope.items.indexOf(selectedTrack);\r\n                if (selectedTrackIndex === -1) {\r\n                    selectedTrackIndex = 0;\r\n                }\r\n                if (e.which == 40) { //down\r\n                    e.preventDefault();                   \r\n                    var index = (((selectedTrackIndex + 1) % $scope.items.length) + $scope.items.length) % $scope.items.length;\r\n                    $scope.selectTrack($scope.items[index], null);\r\n                }\r\n                if (e.which == 38) { //up\r\n                    e.preventDefault();\r\n                    var index = (((selectedTrackIndex - 1) % $scope.items.length) + $scope.items.length) % $scope.items.length;\r\n                    $scope.selectTrack($scope.items[index], null);\r\n                }\r\n                if (e.which == 13 && selectedTrack) {\r\n                    $scope.playTrack(selectedTrack);\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n            /*drag drop*/\r\n            $elem[0].addEventListener('dragstart', function(e) {\r\n\r\n            });\r\n\r\n            $elem[0].addEventListener('dragover', function(e) {\r\n                e.preventDefault();\r\n                e.cancelBubble = true;\r\n                e.stopPropagation();\r\n            });\r\n\r\n            $elem[0].addEventListener('dragend', function(e) {\r\n                e.preventDefault();\r\n                e.cancelBubble = true;\r\n                e.stopPropagation();\r\n            });\r\n        }\r\n    }\r\n});\r\n","angular.module('sp-app').directive('volume', function(player, $rootScope, configFactory) {\r\n    return {\r\n        replace: true,\r\n        templateUrl: 'app/controls/volume/volume.html',\r\n        link: function($scope, $elem, $attrs) {\r\n\r\n            $scope.toggleVolume = function() {\r\n               \r\n                $scope.isOpened = !$scope.isOpened;\r\n            }\r\n            \r\n            var line, handler, volLabel;\r\n            var initY;\r\n            var volumeCnt;\r\n            var logicalPercent = 100;\r\n            var isSeek = false;\r\n            var vol, volToggle;\r\n            \r\n\r\n            vol = $elem[0];\r\n            line = vol.querySelector('#vol-line');\r\n            handler = vol.querySelector('#vol-handler');\r\n            volLabel = vol.querySelector('#vol-label');\r\n            volumeCnt = vol.querySelector('.volume');\r\n            volToggle = vol.querySelector('#vol-toggle');\r\n            $rootScope.$on('global-mouse-click', function(event, obj) {\r\n                if(obj.target != vol \r\n                    && obj.target != line \r\n                    && obj.target != handler \r\n                    && obj.target != volumeCnt \r\n                    && obj.target != volToggle) {\r\n                    $scope.isOpened = false;\r\n                }\r\n            });\r\n            handler.addEventListener('mousedown', onMouseDown);\r\n            volumeCnt.addEventListener('mousewheel', onMouseWheel);\r\n\r\n\r\n            volLabel.textContent = player.getVolume();\r\n                 \r\n                    var location = 110 * logicalPercent / 100 -100;\r\n                    handler.style.top = Math.abs(location) + 'px';\r\n            line.addEventListener('mousedown', function(e) {\r\n\r\n                var y = (e.offsetY + line.offsetTop) - handler.offsetHeight / 2;\r\n\r\n                moveHandler(y);\r\n                onMouseDown(e);\r\n\r\n            }, false);\r\n\r\n            function moveHandler(top) {\r\n                var topBound = line.offsetTop;\r\n                var bottomBound = line.offsetTop + line.offsetHeight - handler.offsetHeight;\r\n                if (top < topBound) top = topBound;\r\n                if (top > bottomBound) top = bottomBound;\r\n\r\n                var parentHeight = handler.parentElement.offsetHeight;\r\n                var physicalPercent = 100 * top / parentHeight;\r\n                handler.style.top = physicalPercent + '%';\r\n                var logicalHeight = line.offsetHeight - handler.offsetHeight;\r\n                var logicalDiff = top - line.offsetTop;\r\n                logicalPercent = 100 - 100 * logicalDiff / logicalHeight;\r\n                setVolume();\r\n\r\n            }\r\n\r\n            function onMouseWheel(e) {\r\n\r\n                if (e.wheelDelta < 0) {\r\n                    moveHandler(handler.offsetTop + 5);\r\n                } else {\r\n                    moveHandler(handler.offsetTop - 5);\r\n                }\r\n\r\n            }\r\n\r\n            function onMouseDown(e) {\r\n\r\n                isSeek = true;\r\n                initY = e.pageY - handler.offsetTop;\r\n                document.body.addEventListener('mousemove', onMouseMove);\r\n                document.body.addEventListener('mouseup', onMouseUp);\r\n                //  volLabel.style.display = 'block';\r\n            }\r\n\r\n            function onMouseMove(e) {\r\n\r\n                e.preventDefault();\r\n                var y = e.pageY;\r\n                var top = (y - initY);\r\n\r\n                moveHandler(top);\r\n\r\n\r\n            }\r\n            var debounced = _.debounce(updateConfig, 500);\r\n            function setVolume() {\r\n                volLabel.textContent = player.getVolume();\r\n               \tplayer.setVolume(logicalPercent);\r\n                volLabel.textContent = player.getVolume();\r\n                debounced();\r\n                \r\n            }\r\n            function updateConfig() {\r\n                \r\n                configFactory.configuration.playback.volume = logicalPercent;\r\n            }\r\n            function onMouseUp(e) {\r\n                isSeek = false;\r\n                document.body.removeEventListener('mousemove', onMouseMove);\r\n                document.body.removeEventListener('mouseup', onMouseUp);\r\n                // volLabel.style.display = 'none';\r\n            }\r\n            $scope.$on('volume-changed', function(args,e){\r\n                logicalPercent = configFactory.configuration.playback.volume;\r\n                player.setVolume(logicalPercent);\r\n                volLabel.textContent = player.getVolume();\r\n             \r\n                var location = 110 * logicalPercent / 100 -100;\r\n                handler.style.top = Math.abs(location) + 'px';\r\n            })\r\n\r\n        }\r\n    }\r\n});\r\n","angular.module('sp-app').directive('dragDrop', function(player, localStorage, Directory, File, fileSystem) {\r\n    return {\r\n        link: function($scope, $elem, $attr) {\r\n                \r\n            var dropZone = content.querySelector('.drop_zone')\r\n            content.addEventListener(\"dragover\", function(e) {\r\n                e.preventDefault();\r\n                if (!content.classList.contains('drag-mode')) {\r\n                    content.classList.add('drag-mode');\r\n                }\r\n\r\n            });\r\n            dropZone.addEventListener('dragleave', function() {\r\n                content.classList.remove('drag-mode');\r\n            });\r\n            dropZone.addEventListener('mouseout', function() {\r\n                content.classList.remove('drag-mode');\r\n            });\r\n            dropZone.addEventListener(\"drop\", function(e) {\r\n                e.preventDefault();\r\n                content.classList.remove('drag-mode');\r\n                var files = e.dataTransfer.items;\r\n                fileSystem.processTransferedData(e.dataTransfer).then(function(item) {\r\n                    localStorage.addTemporary(item);\r\n                });\r\n                // for (var i = 0; i < files.length; i++) {\r\n                //     var item = files[i];\r\n                //     var entry = item.webkitGetAsEntry();\r\n                 \r\n                //     if (entry.isDirectory) {\r\n                        \r\n                //         var dir = new Directory(entry);\r\n                //         // dir.metadata = chrome.mediaGalleries.getMediaFileSystemMetadata(selectedDirectory);\r\n                //         // dir.physicalPath = dir.metadata.name;\r\n                //         localStorage.addTemporary(dir);\r\n                //     } else {\r\n                //         entry.getExtension = function() {\r\n                //             return entry.fullPath.split('.').pop();\r\n                //         };\r\n                //         var file = new File(entry);\r\n                //         localStorage.addTemporary(file);\r\n                //     }\r\n                // }\r\n            })\r\n\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').directive('scrollbarRoot', function() {\r\n    return {\r\n        scope: true, \r\n        link: function($scope, $elem, $attr) {\r\n            var elem = $elem[0];\r\n\r\n            elem.addEventListener('scroll', onScroll);\r\n\r\n            function onScroll(e) {\r\n               if($scope.handler) {\r\n                    $scope.handler(e);\r\n               }\r\n            }\r\n\r\n            $scope.$on('$destroy', function() {\r\n                elem.removeEventListener('scroll', onScroll);\r\n            })\r\n            $scope.getElement = function() {\r\n                return elem;\r\n            }\r\n        },\r\n        controller: function($scope) {\r\n            var self = this;\r\n            self.onScroll = function(callback){\r\n                \r\n                $scope.handler = callback;\r\n            }\r\n            self.getElement = function() {\r\n                return $scope.getElement();\r\n            }\r\n\r\n        },\r\n        controllerAs: \"scrollbarRoot\"\r\n    }\r\n})\r\n","angular.module('sp-app').directive('spRightClick', function($parse) {\r\n    var menu;\r\n    return function($scope, $elem, $attrs) {\r\n        var elem = $elem[0];\r\n        elem.addEventListener('contextmenu', function(event){\r\n            var fn = $parse($attrs.spRightClick);\r\n            if(fn) {\r\n                 fn($scope, {$event: event});\r\n            }\r\n           \r\n            event.preventDefault();\r\n        });\r\n    }\r\n})","angular.module('sp-app').directive('spStick', function($parse) {\r\n    var menu;\r\n    return function($scope, $elem, $attrs) {\r\n        var elem = $elem[0];\r\n        elem.addEventListener('scroll', function(event) {\r\n\r\n            if (elem.scrollTop == 0 && elem.parentElement.classList.contains('stick')) {\r\n                elem.parentElement.classList.remove('stick');\r\n            } else if (!elem.parentElement.classList.contains('stick')) {\r\n                elem.parentElement.classList.add('stick');\r\n            }\r\n\r\n        });\r\n    }\r\n})\r\n","angular.module('sp-app').factory('Album', function() {\r\n    function Album(name) {\r\n        this.name = name;\r\n        this.tracks = [];\r\n        this.albumArtPath = \"\";\r\n    }\r\n    Album.prototype.addTrack = function(track) {\r\n    \ttrack.album  = this;\r\n    \tthis.tracks.push(track);\r\n    }\r\n    Album.prototype.removeTrack = function(track) {\r\n    \ttrack.album = null;\r\n    \t_.remove(this.tracks, track);\r\n    }\r\n    return Album;\r\n});\r\n","angular.module('sp-app').factory('Artist', function(fileSystem) {\r\n    function Artist(name) {\r\n        this.name = name;\r\n        this.albums = [];\r\n\r\n    }\r\n    Artist.prototype.addAlbum = function(album) {\r\n    \talbum.artist = this;\r\n    \tthis.albums.push(album);\r\n    }\r\n    Artist.prototype.removeAlbum = function(album) {\r\n    \talbum.artist = null;\r\n    \tfileSystem.removeURL(album.albumArthPath);\r\n    \t_.remove(this.albums, album);\r\n    }    \r\n    return Artist;\r\n});","angular.module('sp-app').factory('Cloud', function() {\r\n    function Cloud(name) {\r\n        this.name = name;\r\n        this.tracks = [];\r\n        this.user = \"\";\r\n    }\r\n    Cloud.prototype.addTrack = function(track) {\r\n    \ttrack.cloud  = this;\r\n    \tthis.tracks.push(track);\r\n    }\r\n    Cloud.prototype.removeTrack = function(track) {\r\n    \ttrack.cloud = null;\r\n    \t_.remove(this.tracks, track);\r\n    }\r\n    return Cloud;\r\n});","angular.module('sp-app').factory('Directory', function(Entry) {\r\n    function Directory(rawData) {\r\n        Entry.call(this, rawData);\r\n        this.entries = [];        \r\n        this.metadata = undefined;\r\n        this.addEntry = function(entry) {\r\n            entry.parent = this;\r\n            this.entries.push(entry);\r\n        }\r\n        this.physicalPath = null;\r\n\r\n    }\r\n    Directory.prototype = new Entry();\r\n\r\n    return Directory;\r\n})\r\n","angular.module('sp-app').factory('Entry', function () {\r\n    function Entry(rawData) {\r\n      \r\n        this.rawData = rawData;\r\n        this.relativePath = \"\";\r\n\t\tthis.physicalPath = \"\";\r\n        this.parent = null;        \r\n        \r\n    }\r\n    Entry.prototype.getRawData = function(){\r\n        return this.rawData;\r\n    }\r\n    return Entry;\r\n})","angular.module('sp-app').factory('File', function (Entry) {\r\n    function File(rawData) {\r\n\t\tEntry.call(this, rawData);\r\n\t\tif(rawData && rawData.getExtension) {\r\n\t\t\tthis.extension =  rawData.getExtension();\r\n\t\t}\r\n\t\tvar _physicalPath = \"\"\r\n        if(typeof(rawData) == 'string') {\r\n            this.name = rawData\r\n        } else {\r\n\t\tthis.name = rawData && rawData.name;\r\n        }\r\n\t\tthis.file = undefined;\r\n\t\tthis.physicalPath = \"\";\r\n        this.local = false;\r\n        \r\n\r\n    }\r\n\tFile.prototype = new Entry();\r\n    return File;\r\n})","angular.module('sp-app').factory('Playlist', function(uidService) {\r\n    function Playlist(name) {\r\n        this.id = name;\r\n        this.name = name;\r\n        this.tracks = [];\r\n        this.dataMapping = {};\r\n\r\n    }\r\n    Playlist.prototype.addTrack = function(track) {\r\n        // track.playlist = this;\r\n        this.tracks.push(track);\r\n    }\r\n    Playlist.prototype.removeTrack = function(track) {\r\n        // track.playlist = null;\r\n        _.remove(this.tracks, track);\r\n    }\r\n    return Playlist;\r\n});\r\n","angular.module('sp-app').factory('Track', function() {\r\n    function Track(file) {\r\n        var uid = \"\";\r\n        this.title = file.name;\r\n        this.file = file;\r\n        this.duration = undefined;\r\n        this.album = undefined;\r\n        this.src = undefined;\r\n        this.metadata = undefined;\r\n        this.playlist = undefined;\r\n        this.cloud = undefined;\r\n        this.number = undefined;\r\n        var slef = this;\r\n        Object.defineProperty(this, 'id', {\r\n            get: function() {\r\n                if (slef.file.local) {\r\n                    return slef.file.physicalPath;\r\n                } else {\r\n                    return this.file.id;\r\n                }\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n    return Track;\r\n});\r\n","angular.module('sp-app').factory('chromeFileSystem', function($q, Directory, File, Entry) {\r\n    var watchedDirectories = [];\r\n    if (window.chrome && window.chrome.mediaGalleries) {\r\n        chrome.mediaGalleries.onGalleryChanged.addListener(function(details) {\r\n\r\n            if (details.type == \"contents_changed\") {\r\n                var changedDirectory = _.find(watchedDirectories, function(wd) {\r\n                    return wd.directory.metadata.galleryId == details.galleryId;\r\n                })\r\n                if (changedDirectory.callback) {\r\n                    changedDirectory.callback(changedDirectory.directory);\r\n                }\r\n            }\r\n        })\r\n    }\r\n    return {\r\n        // chooseLocation: function() {\r\n        //     return $q(function(reslove, reject) {\r\n        //         chrome.fileSystem.chooseEntry({\r\n        //             type: \"openDirectory\"\r\n        //         }, function(entry) {\r\n        //             if (chrome.runtime.lastError) {\r\n        //                 reject(chrome.runtime.lastError.message);\r\n        //             }\r\n        //             if (entry != undefined) {\r\n\r\n        //                 chrome.fileSystem.getDisplayPath(entry, function(fullPath) {\r\n        //                     var dir = new Directory(entry);\r\n        //                     dir.physicalPath = fullPath;\r\n        //                     reslove(dir);\r\n        //                 })\r\n\r\n        //             } else {\r\n        //                 reject(\"Entry is empty\")\r\n        //             }\r\n        //         })\r\n        //     });\r\n\r\n        // },\r\n        chooseLocation: function() {\r\n            return $q(function(resolve, reject) {\r\n                chrome.mediaGalleries.addUserSelectedFolder(function(mediaFileSystems, selectedFileSystemName) {\r\n\r\n                    if (selectedFileSystemName) {\r\n                        var selectedDirectory = _.find(mediaFileSystems, function(mfs) {\r\n                            return mfs.name == selectedFileSystemName;\r\n                        })\r\n\r\n                        var dir = new Directory(selectedDirectory.root);\r\n                        dir.metadata = chrome.mediaGalleries.getMediaFileSystemMetadata(selectedDirectory);\r\n                        dir.physicalPath = dir.metadata.name;\r\n                        resolve(dir);\r\n                    }\r\n                });\r\n            })\r\n        },\r\n        addFolderWatch: function(directory, callback) {\r\n            return $q(function(resolve, reject) {\r\n\r\n                chrome.mediaGalleries.addGalleryWatch(directory.metadata.galleryId, function(result) {\r\n                    if (result.success) {\r\n                        watchedDirectories.push({\r\n                            directory: directory,\r\n                            callback: callback\r\n                        });\r\n                        resolve(result);\r\n                    } else {\r\n                        reject(result);\r\n                    }\r\n                });\r\n            })\r\n        },\r\n        removeFolderWatch: function(directory) {\r\n            var directoryToDelete = _.find(watchedDirectories, function(dir) {\r\n                return dir.directory == directory;\r\n            });\r\n            _.remove(watchedDirectories, function(dir) {\r\n                return dir.directory == directory;\r\n            })\r\n            if (directoryToDelete) {\r\n                chrome.mediaGalleries.removeGalleryWatch(directoryToDelete.directory.metadata.galleryId);\r\n                // chrome.mediaGalleries.dropPermissionForMediaFileSystem(directoryToDelete.directory.metadata.galleryId);\r\n\r\n            } else {\r\n                chrome.mediaGalleries.removeGalleryWatch(directory.metadata.galleryId);\r\n                // chrome.mediaGalleries.dropPermissionForMediaFileSystem(directory.metadata.galleryId);\r\n\r\n            }\r\n\r\n\r\n        },\r\n\r\n        autoDetect: function(interactive) {\r\n            return $q(function(resolve, reject) {\r\n                chrome.mediaGalleries.getMediaFileSystems({\r\n                    interactive: interactive\r\n                }, function(mediaFileSystems) {\r\n                    var directories = mediaFileSystems.map(function(mfs) {\r\n                        var dir = new Directory(mfs.root);\r\n                        dir.metadata = chrome.mediaGalleries.getMediaFileSystemMetadata(mfs);\r\n                        dir.physicalPath = dir.metadata.name;\r\n                        return dir;\r\n                    });\r\n                    resolve(directories);\r\n\r\n                })\r\n            });\r\n        },\r\n        getEntries: function(directory) {\r\n            var allEntries = [];\r\n            var deferred = $q.defer();\r\n            var dirReader = directory.rawData.createReader();\r\n\r\n            function readEntries() {\r\n                dirReader.readEntries(function(result) {\r\n                    if (result.length) {\r\n                        var entries = result.map(function(item) {\r\n                            if (item.isDirectory) {\r\n                                return new Directory(item);\r\n                            } else if (item.isFile) {\r\n                                /////////////////////////\r\n\r\n\r\n\r\n                                item.getExtension = function() {\r\n                                    return item.fullPath.split('.').pop();\r\n                                };\r\n                                return new File(item);\r\n                            } else {\r\n                                return new Entry(item);\r\n                            }\r\n\r\n                        });\r\n                        allEntries = allEntries.concat(entries);\r\n                        readEntries();\r\n                    } else {\r\n                        deferred.resolve(allEntries);\r\n                    }\r\n\r\n                }, function(error) {\r\n                    if (error.name === \"NotFoundError\") {\r\n                        deferred.reject({ type: error.name });\r\n                    } else {\r\n                        defered.reject({ type: \"UnknownError\" });\r\n                    }\r\n\r\n                });\r\n            }\r\n            readEntries();\r\n            return deferred.promise;\r\n        },\r\n        errors: {\r\n            not_found: \"NotFoundError\",\r\n            unknown: \"UnknownError\"\r\n        },\r\n        getDisplayPath: function(directory) {\r\n\r\n            return $q(function(resolve, reject) {\r\n               \r\n                chrome.fileSystem.getDisplayPath(directory.rawData, function(fullPath) {\r\n                    if (chrome.runtime.lastError) {\r\n                        console.log(chrome.runtime.lastError)\r\n                    }\r\n                    \r\n                });\r\n            })\r\n\r\n        },\r\n        getRootDirectory: function() {\r\n            return $q(function(resolve, reject) {\r\n                chrome.runtime.getPackageDirectoryEntry(function(dirEntry) {\r\n                    var rootDir = new Directory(dirEntry);\r\n                    resolve(rootDir);\r\n                })\r\n            })\r\n        },\r\n        getFile: function(rootDirecotry) {\r\n            return $q(function(resolve, reject) {\r\n                rootDirecotry.rawData.getFile('log.txt', { create: false }, function(fileEntry) {\r\n                    resolve(fileEntry);\r\n                }, function(error) {\r\n                    reject(error.message);\r\n                })\r\n            })\r\n        },\r\n        obtainURL: function(file) {\r\n            if(file instanceof File) {\r\n                return URL.createObjectURL(file.file);\r\n            } else {\r\n                return URL.createObjectURL(file);\r\n            }\r\n        },\r\n        removeURL: function(itemSrc) {\r\n            URL.revokeObjectURL(itemSrc);\r\n        },\r\n        obtainFiles: function(musicFiles) {\r\n            var deffered = $q.defer();\r\n            var indicator = 0;\r\n            var musicLength = musicFiles.length;\r\n            var faildFiles = [];\r\n            for (var i = 0; i < musicFiles.length; i++) {\r\n                musicFiles[i].local = true;\r\n                musicFiles[i].rawData.file(function(x) {\r\n                    return function(file) {                      \r\n                        musicFiles[x].file = file;\r\n                        if (x == musicLength - 1) {\r\n                            faildFiles.forEach(function(f){\r\n                                _.remove(musicFiles, f);\r\n                            })\r\n                            deffered.resolve(musicFiles);\r\n\r\n                        }\r\n                    }\r\n\r\n                }(i), \r\n                function(y) {\r\n                    return function(err) {\r\n                        if(err) {\r\n                            faildFiles.push(musicFiles[y]);\r\n                            if (y == musicLength - 1) {\r\n                                faildFiles.forEach(function(f){\r\n                                    _.remove(musicFiles, f);\r\n                                })\r\n                                deffered.resolve(musicFiles);\r\n                            }\r\n                            \r\n                        }\r\n                    }\r\n                }(i));\r\n            }\r\n            return deffered.promise;\r\n        },\r\n        processTransferedData: function(dataTransfer) {\r\n            var files = dataTransfer.items;\r\n            var deferred = $q.defer();\r\n            \r\n            for (var i = 0; i < files.length; i++) {\r\n                var item = files[i];\r\n                var entry = item.webkitGetAsEntry();\r\n             \r\n                if (entry.isDirectory) {\r\n                    \r\n                    var dir = new Directory(entry);\r\n                    // dir.metadata = chrome.mediaGalleries.getMediaFileSystemMetadata(selectedDirectory);\r\n                    // dir.physicalPath = dir.metadata.name;\r\n                    deferred.resolve(dir);\r\n                    // localStorage.addTemporary(dir);\r\n                } else {\r\n                    entry.getExtension = function() {\r\n                        return entry.fullPath.split('.').pop();\r\n                    };\r\n                    var file = new File(entry);\r\n                    deferred.resolve(file);\r\n                    // localStorage.addTemporary(file);\r\n                }\r\n            }\r\n            return deferred.promise;\r\n        },\r\n        getEntriesRecursively: function(directory) {\r\n\r\n            var self = this;\r\n            var indicator = 0;\r\n            var deferred = $q.defer();\r\n            var fileList = []\r\n\r\n            function recursiveProcess(dir) {\r\n                indicator++;\r\n\r\n                self.getEntries(dir).then(function(entries) {\r\n\r\n                    indicator--;\r\n                    for (var i = 0; i < entries.length; i++) {\r\n                        if (entries[i] instanceof Directory) {\r\n\r\n                            recursiveProcess(entries[i]);\r\n                            // dir.addEntry(entries[i]);\r\n                        }\r\n                        if (entries[i] instanceof File) {\r\n                            // dir.addEntry(entries[i]);\r\n                            fileList.push(entries[i]);\r\n                        }\r\n                    }\r\n                    if (indicator == 0) {\r\n                        deferred.resolve({\r\n                            directory: directory,\r\n                            fileList: fileList\r\n                        });\r\n                    }\r\n\r\n                }, function(error) {\r\n                    deferred.reject(error);\r\n                });\r\n\r\n            }\r\n            recursiveProcess(directory);\r\n            return deferred.promise;\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n});\r\n","angular.module(\"sp-app\").factory(\"chromeStorage\", function ($q) {\r\n    return {\r\n        set: function (key, obj) {\r\n            var o = {};\r\n            o[key] = obj;\r\n            chrome.storage.local.set(o);\r\n        },\r\n        get: function (key) {\r\n            return $q(function (resolve, reject) {\r\n                chrome.storage.local.get(key, function (obj) {\r\n                    if (chrome.runtime.lastError) {\r\n                        reject(chrome.runtime.lastError.message);\r\n                    } else {\r\n                        resolve(obj[key]); \r\n                    }\r\n                });\r\n            });\r\n        },\r\n        remove: function(key) {\r\n            return $q(function(resolve, reject){\r\n                chrome.storage.local.remove(key, function(){\r\n                    if (chrome.runtime.lastError) {\r\n                        reject(chrome.runtime.lastError.message);\r\n                    } else {\r\n                        resolve(); \r\n                    }\r\n                })\r\n            })\r\n        }\r\n        \r\n    };\r\n});","angular.module('sp-app').factory('chromeWindowManager', function() {\r\n    return {\r\n        createWindow: function(url, options) {\r\n            options.frame = 'none';\r\n           \r\n            chrome.app.window.create(url, options);\r\n\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').factory('configFactory', function(player, $q, storage) {\r\n    // settings defaults\r\n    var configObj = {\r\n        settings: {\r\n            autoPlay: false,\r\n            showAlbumArt: true,\r\n            alwaysTop: false,\r\n            theme: \"primary.css\"\r\n\r\n        },\r\n        playback: {\r\n            repeat: player.repeatModes.repeatAll,\r\n            shuffle: false,\r\n            volume: 50\r\n        }\r\n\r\n    }\r\n\r\n    var retObj =  {\r\n        loadConfiguration: function() {\r\n            var deferred = $q.defer();\r\n            storage.get(\"config\").then(function(config) {\r\n                \r\n                _.merge(configObj, config);\r\n              \r\n                deferred.resolve();\r\n\r\n\r\n            });            \r\n            return deferred.promise;\r\n        },\r\n        saveConfiguration: function() {\r\n            storage.set('config', configObj);\r\n        },\r\n        configuration: configObj    \r\n    };\r\n\r\n    return retObj;\r\n\r\n})\r\n","angular.module('sp-app').factory('DbContext', function($q) {\r\n\r\n\r\n\r\n\r\n\r\n    function DbContext(dbName, objectStoreNames) {\r\n        this.dbName = dbName;\r\n\r\n        this.objectStoreNames = [];\r\n        this.db = null;\r\n        this.version = 5;\r\n\r\n        if (objectStoreNames) {\r\n            objectStoreNames.forEach(function(objectStoreName) {\r\n\r\n                this.objectStoreNames.push(objectStoreName);\r\n            }.bind(this))\r\n        }\r\n\r\n    }\r\n\r\n    DbContext.prototype.openDatabase = function() {\r\n        var self = this;\r\n        var deferred = $q.defer();\r\n        if (!self.db) {\r\n\r\n            var request = indexedDB.open(this.dbName, this.version);\r\n\r\n            \r\n                request.onerror = function(event) {\r\n                    console.log(\"error: \");\r\n                    deferred.reject(\"error: \");\r\n                };\r\n\r\n                request.onsuccess = function(event) {\r\n                    self.db = request.result;                    \r\n                    deferred.resolve();\r\n\r\n                };\r\n                request.onupgradeneeded = function(event) {\r\n                    self.db = event.target.result;\r\n                   console.log(self.db);\r\n                    \r\n                    self.objectStoreNames.forEach(function(objectStoreName) {\r\n                        if(!self.db.objectStoreNames.contains(objectStoreName)) {\r\n                            var objectStore = self.db.createObjectStore(objectStoreName, { keyPath: \"id\" });\r\n                        }\r\n                    })\r\n\r\n                    // console.log('hello')\r\n                    // for (var i in employeeData) {\r\n                    //     objectStore.add(employeeData[i]);\r\n                    // }\r\n                }\r\n           \r\n        } else {\r\n            deferred.resolve();\r\n        }\r\n        return deferred.promise;\r\n\r\n    }\r\n    DbContext.prototype.addEntry = function(objectStoreName, entry) {\r\n\r\n        var request = this.db.transaction([objectStoreName], \"readwrite\")\r\n            .objectStore(objectStoreName)\r\n            .add(entry);\r\n        return $q(function(resolve, reject) {\r\n            request.onsuccess = function(event) {\r\n               \r\n                resolve(event);\r\n            };\r\n\r\n            request.onerror = function(event) {\r\n                reject(\"Unable to add data\\r\\nKenny is aready exist in your database! \");\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n    DbContext.prototype.updateEntry = function(objectStoreName, entry) {\r\n\r\n        var request = this.db.transaction([objectStoreName], \"readwrite\")\r\n            .objectStore(objectStoreName)\r\n            .put(entry);\r\n        return $q(function(resolve, reject) {\r\n            request.onsuccess = function(event) {\r\n               \r\n                resolve(event);\r\n            };\r\n\r\n            request.onerror = function(event) {\r\n                reject(\"Unable to add data\\r\\nKenny is aready exist in your database! \");\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n    DbContext.prototype.removeEntry = function(objectStoreName, entryId) {\r\n        var request = this.db.transaction([objectStoreName], \"readwrite\")\r\n            .objectStore(objectStoreName)\r\n            .delete(entryId);\r\n        return $q(function(resolve, reject) {\r\n            request.onsuccess = function(event) {\r\n                \r\n                resolve(event);\r\n            };\r\n\r\n            request.onerror = function(event) {\r\n                reject(\"Unable to add data\\r\\nKenny is aready exist in your database! \");\r\n            }\r\n        });\r\n    };\r\n    DbContext.prototype.getEntry = function(objectStoreName, entryId) {\r\n        var self = this;\r\n        var deferred = $q.defer();\r\n        var transaction = this.db.transaction([objectStoreName]);\r\n        var objectStore = transaction.objectStore(objectStoreName);\r\n        var request = objectStore.get(entryId);\r\n\r\n        request.onerror = function(event) {\r\n           console.log(\"Unable to retrieve daa from database!\");\r\n           deferred.reject();\r\n        };\r\n\r\n        request.onsuccess = function(event) {\r\n            // Do something with the request.result!\r\n            if (request.result) {\r\n\r\n                deferred.resolve(request.result);\r\n            } else {\r\n                console.log(\"Entity could not be found!\");\r\n                deferred.resolve();\r\n            }\r\n        };\r\n        return deferred.promise;\r\n    };\r\n    DbContext.prototype.getAllEntries = function(objectStoreName) {\r\n\r\n        var objectStore = this.db.transaction(objectStoreName).objectStore(objectStoreName);\r\n        var entries = [];\r\n        var deferred = $q.defer();\r\n        objectStore.openCursor().onsuccess = function(event) {\r\n            var cursor = event.target.result;\r\n\r\n            if (cursor) {\r\n               \r\n                    entries.push(cursor.value);\r\n               \r\n                cursor.continue();\r\n            } else {\r\n                deferred.resolve(entries);\r\n            }\r\n        };\r\n        return deferred.promise; \r\n    }\r\n    DbContext.prototype.clear = function(objectStoreName) {\r\n        var request = this.db.transaction([objectStoreName], \"readwrite\")\r\n            .objectStore(objectStoreName)\r\n            .clear();\r\n        return $q(function(resolve, reject) {\r\n            request.onsuccess = function(event) {\r\n                \r\n                resolve(event);\r\n            };\r\n\r\n            request.onerror = function(event) {\r\n                reject(\"Unable to add data\\r\\nKenny is aready exist in your database! \");\r\n            }\r\n        });\r\n    }\r\n    const DB_NAME = \"SalmonDB\";\r\n    const TRACKS_TABLE = \"tracks\";\r\n    const PLAYLISTS_TABLE = \"playlists\";\r\n   \r\n    var dbContext = new DbContext(DB_NAME, [TRACKS_TABLE, PLAYLISTS_TABLE])\r\n    return {\r\n        getDbContext: function() {\r\n            return dbContext;\r\n        } \r\n    };\r\n\r\n})\r\n","angular.module('sp-app').factory('playlistsRepository', function($q, DbContext) {\r\n\r\n    const DB_NAME = \"SalmonDB\";\r\n    const PLAYLISTS_TABLE = \"playlists\";\r\n    \r\n    var salmonDbContext = null;\r\n    return {\r\n        openConnection: function() {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    resolve();\r\n                }, function() {\r\n                    reject();\r\n                })\r\n            });\r\n        },\r\n        addPlaylist: function(playlist) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.addEntry(PLAYLISTS_TABLE, playlist).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        updatePlaylist: function(playlist) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.updateEntry(PLAYLISTS_TABLE, playlist).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        getPlaylist: function(playlist) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    var id = playlist.name;\r\n                    salmonDbContext.getEntry(PLAYLISTS_TABLE, id).then(function(result) {\r\n                        resolve({ playlistRecord: result, playlist: playlist });\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        removePlaylist: function(playlist) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.removeEntry(PLAYLISTS_TABLE, playlist.name).then(function() {\r\n                        resolve();\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        getAllPlaylists: function() {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.getAllEntries(PLAYLISTS_TABLE).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').factory('queueRepository', function($q, DbContext) {\r\n\r\n    const DB_NAME = \"SalmonDB\";\r\n    const QUEUE_TABLE = \"queue\";\r\n    \r\n    var salmonDbContext = null;\r\n    return {\r\n        openConnection: function() {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    resolve();\r\n                }, function() {\r\n                    reject();\r\n                })\r\n            });\r\n        },\r\n        addQueue: function(queue) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.addEntry(QUEUE_TABLE, queue).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        updateQueue: function(queue) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.updateEntry(QUEUE_TABLE, queue).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        getQueue: function(queue) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    var id = queue.id;\r\n                    salmonDbContext.getEntry(QUEUE_TABLE, id).then(function(result) {\r\n                        resolve({ queueRecord: result, queue: queue });\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        removeQueue: function(queue) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.removeEntry(QUEUE_TABLE, queue.name).then(function() {\r\n                        resolve();\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        getAllQueues: function() {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.getAllEntries(QUEUE_TABLE).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        removeAllQueues: function() {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.clear(QUEUE_TABLE).then(function(result) {\r\n                        resolve();\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').factory('tracksRepository', function($q, DbContext) {\r\n\r\n    const DB_NAME = \"SalmonDB\";\r\n    const TRACKS_TABLE = \"tracks\";\r\n\r\n    var salmonDbContext = null;\r\n    return {\r\n        openConnection: function() {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    resolve();\r\n                }, function() {\r\n                    reject();\r\n                })\r\n            });\r\n        },\r\n        addTrack: function(track) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.addEntry(TRACKS_TABLE, track).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        updateTrack: function(track) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.updateEntry(TRACKS_TABLE, track).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        getTrack: function(trackId, track, metadata) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.getEntry(TRACKS_TABLE, trackId).then(function(result) {\r\n                        resolve({ trackRecord: result, track: track, metadata: metadata });\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        removeTrack: function(track) {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.removeEntry(TRACKS_TABLE, track.id).then(function() {\r\n                        resolve();\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        getAllTracks: function() {\r\n            salmonDbContext = DbContext.getDbContext();\r\n            return $q(function(resolve, reject) {\r\n                salmonDbContext.openDatabase().then(function() {\r\n                    salmonDbContext.getAllEntries(TRACKS_TABLE).then(function(result) {\r\n                        resolve(result);\r\n                    }, function(e) {\r\n                        console.log(e);\r\n                    });\r\n                })\r\n            });\r\n        },\r\n        getMetadata: function(musicStorage, track) {\r\n            var self = this;\r\n            var deferred = $q.defer();\r\n            salmonDbContext = DbContext.getDbContext();\r\n            \r\n            self.getTrack(track.id, track).then(function(result) {\r\n                if (result.trackRecord && result.trackRecord.metadata && !result.trackRecord.metadata.cloud) {\r\n                   \r\n                        deferred.resolve(result.trackRecord);\r\n                   \r\n                 } else {\r\n                    musicStorage.getMetadata(track).then(function(metadata) {\r\n                        deferred.resolve({metadata: metadata});\r\n                    })\r\n                 }\r\n            })\r\n\r\n            return deferred.promise;\r\n\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').factory('desktopFileSystem', function($q, Directory, File, Entry) {\r\n\r\n    var watchedDirectories = [];\r\n    \r\n\r\n    return {\r\n\r\n        chooseLocation: function() {\r\n            const dialog  = require('electron').remote.dialog;\r\n\r\n            return $q(function(resolve, reject) {\r\n\r\n                dialog.showOpenDialog({ properties: ['openDirectory'] }, function(result) {\r\n                        if (result && result.length != 0) {\r\n                            var dir = new Directory();\r\n                            dir.physicalPath = result[0];\r\n                            resolve(dir);\r\n                        }\r\n                    })\r\n                    // chrome.mediaGalleries.addUserSelectedFolder(function(mediaFileSystems, selectedFileSystemName) {\r\n\r\n                //     if (selectedFileSystemName) {\r\n                //         var selectedDirectory = _.find(mediaFileSystems, function(mfs) {\r\n                //             return mfs.name == selectedFileSystemName;\r\n                //         })\r\n\r\n                //         var dir = new Directory(selectedDirectory.root);\r\n                //         dir.metadata = chrome.mediaGalleries.getMediaFileSystemMetadata(selectedDirectory);\r\n                //         dir.physicalPath = dir.metadata.name;\r\n                //         resolve(dir);\r\n                //     }\r\n                // });\r\n            })\r\n        },\r\n        addFolderWatch: function(directory, callback) {\r\n            var fs = require('fs');\r\n            var debounced = _.debounce(callback, 500);\r\n            return $q(function(resolve, reject) {\r\n              \r\n                var w = fs.watch(directory.physicalPath, { encoding: 'string'}, (event, filename) => {\r\n                        if (filename) {\r\n                            // debugger;\r\n                            debounced(directory);\r\n                        }\r\n                    });\r\n                watchedDirectories.push({\r\n                    watcher: w,\r\n                    directory:directory\r\n                })\r\n              \r\n            })\r\n        },\r\n        removeFolderWatch: function(directory) {\r\n            var directoryToDelete = _.find(watchedDirectories, function(dir) {\r\n                return dir.directory == directory;\r\n            });\r\n            _.remove(watchedDirectories, function(dir) {\r\n                return dir.directory == directory;\r\n            })\r\n            if (directoryToDelete) {\r\n                directoryToDelete.watcher.close();              \r\n\r\n            }\r\n\r\n\r\n        },\r\n\r\n        autoDetect: function(interactive) {\r\n            var folders = [\"music\"];\r\n            return $q(function(resolve, reject) {\r\n                var app =  require('electron').remote.app;\r\n                var folderPaths = [];\r\n                folders.forEach(function(folder){\r\n                   folderPaths.push(app.getPath(folder));\r\n                });\r\n                var directories = folderPaths.map(function(mfs){\r\n                    var dir = new Directory();\r\n                    dir.physicalPath = mfs;\r\n                    return dir;\r\n                });\r\n                console.log(directories);\r\n                resolve(directories);             \r\n            });\r\n        },\r\n        getEntries: function(directory) {\r\n            var allEntries = [];\r\n            var deferred = $q.defer();\r\n            var fs = require('fs');\r\n\r\n\r\n\r\n            fs.readdir(directory.physicalPath, function(error, result) {\r\n                if (result) {\r\n                    var entries = result.map(function(item) {\r\n                        var itemPath = directory.physicalPath + '\\\\' +item;\r\n                        var stats = fs.statSync(itemPath);                        \r\n                        if (stats.isDirectory()) {\r\n                            var dir = new Directory();\r\n                            dir.physicalPath = itemPath;\r\n                            return dir;\r\n                        } else if (stats.isFile()) {\r\n                            \r\n                            var file = new File(item);\r\n                            file.physicalPath = itemPath;\r\n                            file.extension = itemPath.split('.').pop();\r\n                            \r\n                            return file;\r\n                        }\r\n                        \r\n                        \r\n                   \r\n                    });\r\n                    allEntries = allEntries.concat(entries);\r\n                    deferred.resolve(allEntries);\r\n                }\r\n            });\r\n            \r\n            return deferred.promise;\r\n        },\r\n        errors: {\r\n            not_found: \"NotFoundError\",\r\n            unknown: \"UnknownError\"\r\n        },\r\n        getDisplayPath: function(directory) {\r\n\r\n             return $q(function(resolve, reject) {               \r\n                resolve(directory.physicalPath);\r\n            })\r\n\r\n        },\r\n        getRootDirectory: function() {\r\n            return $q(function(resolve, reject) {\r\n                chrome.runtime.getPackageDirectoryEntry(function(dirEntry) {\r\n                    var rootDir = new Directory(dirEntry);\r\n                    resolve(rootDir);\r\n                })\r\n            })\r\n        },\r\n        pathExists: function(path) {           \r\n            var fs = require('fs');\r\n            return fs.existsSync(path);\r\n        },\r\n        obtainURL: function(item) {\r\n            if(item instanceof File) {\r\n                return item.physicalPath;\r\n            }\r\n            else  {\r\n                var blob = new Blob([item.data], {'type': 'image/'+item.format});\r\n                return URL.createObjectURL(blob);\r\n            }\r\n        },\r\n        removeURL: function(itemSrc) {\r\n            URL.revokeObjectURL(itemSrc);\r\n        },\r\n        obtainFiles: function(musicFiles) {\r\n            var deffered = $q.defer();           \r\n            for (var i = 0; i < musicFiles.length; i++) {\r\n                musicFiles[i].local = true;\r\n                // musicFiles[i].rawData.file(function(x) {\r\n                //     return function(file) {\r\n\r\n                //         musicFiles[x].file = file;\r\n                //         if (x == musicFiles.length - 1) {\r\n                //             deffered.resolve(musicFiles);\r\n                //         }\r\n                //     }\r\n\r\n                // }(i));\r\n            }\r\n            deffered.resolve(musicFiles);\r\n            return deffered.promise;\r\n        },\r\n        processTransferedData: function(dataTransfer) {\r\n            var files = dataTransfer.files;\r\n            var deferred = $q.defer();\r\n            var fs = require('fs');\r\n\r\n            for (var i = 0; i < files.length; i++) {\r\n                var item = files[i];\r\n                var stats = fs.statSync(item.path);\r\n             \r\n                if (stats.isDirectory()) {\r\n                    \r\n                    var dir = new Directory();\r\n                    dir.physicalPath = item.path;\r\n                    // dir.metadata = chrome.mediaGalleries.getMediaFileSystemMetadata(selectedDirectory);\r\n                    // dir.physicalPath = dir.metadata.name;\r\n                    deferred.resolve(dir);\r\n                    // localStorage.addTemporary(dir);\r\n                } else {                 \r\n                    \r\n                    var file = new File(item.name);\r\n                    file.physicalPath = item.path;\r\n                    file.extension = item.path.split('.').pop();\r\n                    deferred.resolve(file);\r\n                    // localStorage.addTemporary(file);\r\n                }\r\n            }\r\n            return deferred.promise;\r\n        },\r\n        getEntriesRecursively: function(directory) {\r\n\r\n            var self = this;\r\n            var indicator = 0;\r\n            var deferred = $q.defer();\r\n            var fileList = []\r\n\r\n            function recursiveProcess(dir) {\r\n                indicator++;\r\n\r\n                self.getEntries(dir).then(function(entries) {\r\n\r\n                    indicator--;\r\n                    for (var i = 0; i < entries.length; i++) {\r\n                        if (entries[i] instanceof Directory) {\r\n\r\n                            recursiveProcess(entries[i]);\r\n                            // dir.addEntry(entries[i]);\r\n                        }\r\n                        if (entries[i] instanceof File) {\r\n                            // dir.addEntry(entries[i]);\r\n                            fileList.push(entries[i]);\r\n                        }\r\n                    }\r\n                    if (indicator == 0) {\r\n                        deferred.resolve({\r\n                            directory: directory,\r\n                            fileList: fileList\r\n                        });\r\n                    }\r\n\r\n                }, function(error) {\r\n                    deferred.reject(error);\r\n                });\r\n\r\n            }\r\n            recursiveProcess(directory);\r\n            return deferred.promise;\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n});\r\n","angular.module('sp-app').factory('desktopWindowManager', function () {\r\n    return {\r\n        createWindow: function (url, options) {\r\n\r\n            options.frame = true;\r\n            options.show = false;\r\n\r\n            // Or in the renderer process.\r\n            const BrowserWindow = require('electron').remote.BrowserWindow\r\n\r\n            var win = new BrowserWindow(options);\r\n            // win.openDevTools();\r\n            win.on('closed', () => {                \r\n                win = null;\r\n            });\r\n           \r\n            win.loadURL(`file://${__dirname}/${url}`);\r\n            win.show();\r\n            \r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').provider('dialog', function() {\r\n    var _defaults = {\r\n        tempalte: \"\",\r\n        title: \"Title\",\r\n        alignPosition: 'bottom'\r\n    }\r\n    this.$get = function($window, $sce, $compile, $rootScope, $q, $templateCache, $http, $timeout) {\r\n        function Dialog(options) {\r\n            var me = this;\r\n\r\n            for (var option in _defaults) {\r\n                if (!options[option]) {\r\n                    options[option] = _defaults[option];\r\n                }\r\n            }\r\n\r\n\r\n            var fetchPromises = {};\r\n            var wrapperElem = undefined;\r\n            var deferred = undefined;\r\n\r\n            function fetchTemplate(template) {\r\n                if (fetchPromises[template]) {\r\n                    return fetchPromises[template];\r\n                }\r\n                return (fetchPromises[template] = $q.when($templateCache.get(template) || $http.get(template))\r\n                    .then(function(res) {\r\n                        if (angular.isObject(res)) {\r\n                            $templateCache.put(template, res.data);\r\n                            return res.data;\r\n                        }\r\n                        return res;\r\n                    }));\r\n            }\r\n\r\n            function closeDialog(event) {\r\n\r\n\r\n                if (wrapperElem) {\r\n                    wrapperElem.parentNode.removeChild(wrapperElem);\r\n                    wrapperElem = null;\r\n                    document.body.removeEventListener(\"click\", closeDialog);\r\n                    document.body.removeEventListener(\"contextmenu\", closeDialog);\r\n                    if (deferred) {\r\n                        $timeout.cancel(deferred);\r\n                        deferred = undefined;\r\n                    }\r\n                    me.scope.$destroy();\r\n                }\r\n            }\r\n\r\n            function closeDialogBackground(event) {\r\n                if (event.target != event.currentTarget) {\r\n                    return;\r\n                }\r\n                closeDialog();\r\n            }\r\n            this.open = function() {\r\n                scope = options.scope || $rootScope.$new();\r\n                this.scope = scope;\r\n                var $promise = fetchTemplate(options.template);\r\n                //scope.trustedHtml = $sce.trustAsHtml(scope.src);\r\n                wrapperElem = document.createElement('div');\r\n                wrapperElem.style.position = 'absolute';\r\n                wrapperElem.style.zIndex = options.zIndex;\r\n                if (options.backDrop) {\r\n                    wrapperElem.classList.add('player_modal_wrapper');\r\n                }\r\n                if (options.wrapperClass) {\r\n                    wrapperElem.classList.add(options.wrapperClass);\r\n                }\r\n                document.body.appendChild(wrapperElem)\r\n\r\n\r\n                scope.closeDialog = function() {\r\n                    closeDialog();\r\n                }\r\n\r\n                $promise.then(function(template) {\r\n                    if (angular.isObject(template)) {\r\n                        template = template.data;\r\n                    }\r\n                    template = String.prototype.trim.apply(template);\r\n\r\n                    wrapperElem.innerHTML = template;\r\n\r\n                    popupElementLinker = $compile(wrapperElem);\r\n                    popupElementLinker(scope);\r\n                    deferred = $timeout(function() {\r\n                        var wrapperPos = wrapperElem.getBoundingClientRect();\r\n                        if (options.alignElement) {\r\n\r\n                            var alignElemPos = options.alignElement.getBoundingClientRect();\r\n\r\n                            switch (options.alignPosition) {\r\n                                case 'bottom':\r\n                                    options.y = alignElemPos.bottom;\r\n                                    options.x = alignElemPos.left + alignElemPos.width / 2 - wrapperPos.width / 2;\r\n                                    break;\r\n                                case 'top':\r\n                                    options.y = alignElemPos.top - wrapperPos.height;\r\n                                    options.x = alignElemPos.left + alignElemPos.width / 2 - wrapperPos.width / 2;\r\n                                    break;\r\n                                case 'left':\r\n                                    options.y = alignElemPos.top + alignElemPos.height / 2 - wrapperPos.height / 2;\r\n                                    options.x = alignElemPos.left - wrapperPos.width;\r\n                                    break;\r\n                                case 'right':\r\n                                    options.y = alignElemPos.top + alignElemPos.height / 2 - wrapperPos.height / 2;\r\n                                    options.x = alignElemPos.right + wrapperPos.width;\r\n                                    break;\r\n                            }\r\n                            $timeout.cancel(deferred);\r\n                        }\r\n                        var controlWidth = wrapperPos.width || wrapperElem.children[0].offsetWidth;\r\n                        var controlHeight = wrapperPos.height || wrapperElem.children[0].offsetHeight;\r\n                        if (options.y + controlHeight > document.body.offsetHeight) {\r\n                            options.y = options.y - (options.y + controlHeight - document.body.offsetHeight);\r\n                        }\r\n                        if (options.x + controlWidth > document.body.offsetWidth) {\r\n                            options.x = options.x - (options.x + controlWidth - document.body.offsetWidth);\r\n                        }\r\n                        if (options.x < 0) {\r\n                            options.x = 0;\r\n                        }\r\n                        wrapperElem.style.left = options.x + \"px\" || \"\";\r\n                        wrapperElem.style.top = options.y + \"px\" || \"\";\r\n                    })\r\n\r\n                    if (options.autoClose) {\r\n\r\n                        document.body.addEventListener(\"contextmenu\", closeDialog);\r\n                        document.body.addEventListener(\"click\", closeDialog);\r\n\r\n                    }\r\n\r\n\r\n                });\r\n\r\n\r\n\r\n            }\r\n            this.destroy = function() {\r\n\r\n                scope.closeDialog();\r\n            }\r\n        }\r\n\r\n        function createDialogObject(config) {\r\n            var dialog = new Dialog(config);\r\n\r\n            return dialog;\r\n        }\r\n\r\n        return createDialogObject;\r\n    };\r\n})\r\n","angular.module('sp-app').factory('dialogManager', function(dialog, $timeout) {\r\n    dialogs = []\r\n    return {\r\n        openDialog: function(config) {\r\n            config.zIndex = config.zIndex || dialog.length+100;\r\n            dialogElem = dialog(config);\r\n            dialogElem.open();\r\n            dialogs.push(dialogElem);\r\n\r\n            var onClose = config.onClose;\r\n            config.onClose = function() {\r\n\r\n                if (onClose) {\r\n                    $timeout(function() {\r\n                        onClose.apply(this, arguments);\r\n                    });\r\n                }\r\n                dialogs.splice(dialogs.indexOf(dialogElem), 1);\r\n            }\r\n            return dialogElem;\r\n        },\r\n        getDialogs: function() {\r\n            return dialogs;\r\n        },\r\n        closeDialog: function() {\r\n            if(dialogs[dialogs.length - 1]) {\r\n                dialogs[dialogs.length - 1].destroy();\r\n            }\r\n        }\r\n    }\r\n})","// angular.module('sp-app').factory('dimensionService', function() {    \r\n//     var innerBounds = undefined;\r\n//     var outterBounds = undefined;\r\n//     // chrome.app.window.current().onBoundsChanged.addListener(onWindowResize);\r\n//     // function onWindowResize(e) {\r\n//     //     bounds = chrome.app.window.current().innerBounds;\r\n//     //     outterBounds = chrome.app.window.current().innerOutter;\r\n//     // }\r\n//     // return {\r\n//     //     getWindowInnerBounds: function() {\r\n//     //         return innerBounds;\r\n//     //     },\r\n//     //     getWindowOutterBounds: function() {\r\n//     //         return outterBounds;\r\n//     //     },\r\n//     //     getWindowBounds: function() {\r\n//     //         return innerBounds;\r\n//     //     }\r\n//     // }\r\n// })","angular.module(\"sp-app\").provider(\"fileSystem\", function () {\r\n    \r\n\r\n    this.$get = function (platform, chromeFileSystem, html5FileSystem, desktopFileSystem) {\r\n\r\n        if(platform.getType() == platform.types.chrome) {\r\n            return chromeFileSystem;\r\n        } else if(platform.getType() == platform.types.desktop) {\r\n            return desktopFileSystem;\r\n        } else if(platform.getType() == platform.types.web) {\r\n            return html5FileSystem;\r\n        }    \r\n           \r\n    \r\n    }\r\n})","angular.module('sp-app').factory('guid', function(player, $q, storage) {\r\n    return {\r\n        generate: function() {\r\n            var d = new Date().getTime();\r\n            var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n                var r = (d + Math.random() * 16) % 16 | 0;\r\n                d = Math.floor(d / 16);\r\n                return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n            });\r\n            return uuid;\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').factory('html5FileSystem', function($q, Directory, File, Entry) {\r\n   \r\n    return {\r\n        // chooseLocation: function() {\r\n        //     return $q(function(reslove, reject) {\r\n        //         chrome.fileSystem.chooseEntry({\r\n        //             type: \"openDirectory\"\r\n        //         }, function(entry) {\r\n        //             if (chrome.runtime.lastError) {\r\n        //                 reject(chrome.runtime.lastError.message);\r\n        //             }\r\n        //             if (entry != undefined) {\r\n\r\n        //                 chrome.fileSystem.getDisplayPath(entry, function(fullPath) {\r\n        //                     var dir = new Directory(entry);\r\n        //                     dir.physicalPath = fullPath;\r\n        //                     reslove(dir);\r\n        //                 })\r\n\r\n        //             } else {\r\n        //                 reject(\"Entry is empty\")\r\n        //             }\r\n        //         })\r\n        //     });\r\n\r\n        // },\r\n        chooseLocation: function() {\r\n            return $q(function(resolve, reject) {\r\n                resolve();\r\n            })\r\n        },\r\n\r\n        getEntries: function(directory) {\r\n            var allEntries = [];\r\n            var deferred = $q.defer();\r\n            var dirReader = directory.rawData.createReader();\r\n\r\n            function readEntries() {\r\n                dirReader.readEntries(function(result) {\r\n                    if (result.length) {\r\n                        var entries = result.map(function(item) {\r\n                            if (item.isDirectory) {\r\n                                return new Directory(item);\r\n                            } else if (item.isFile) {\r\n                                /////////////////////////\r\n\r\n\r\n\r\n                                item.getExtension = function() {\r\n                                    return item.fullPath.split('.').pop();\r\n                                };\r\n                                return new File(item);\r\n                            } else {\r\n                                return new Entry(item);\r\n                            }\r\n\r\n                        });\r\n                        allEntries = allEntries.concat(entries);\r\n                        readEntries();\r\n                    } else {\r\n                        deferred.resolve(allEntries);\r\n                    }\r\n\r\n                }, function(error) {\r\n                    if (error.name === \"NotFoundError\") {\r\n                        deferred.reject({ type: error.name });\r\n                    } else {\r\n                        defered.reject({ type: \"UnknownError\" });\r\n                    }\r\n\r\n                });\r\n            }\r\n            readEntries();\r\n            return deferred.promise;\r\n        },\r\n        errors: {\r\n            not_found: \"NotFoundError\",\r\n            unknown: \"UnknownError\"\r\n        },\r\n        getDisplayPath: function(directory) {\r\n\r\n            return $q(function(resolve, reject) {\r\n                resolve();\r\n            })\r\n\r\n        },\r\n        getRootDirectory: function() {\r\n            return $q(function(resolve, reject) {\r\n                chrome.runtime.getPackageDirectoryEntry(function(dirEntry) {\r\n                    var rootDir = new Directory(dirEntry);\r\n                    resolve(rootDir);\r\n                })\r\n            })\r\n        },\r\n        getFile: function(rootDirecotry) {\r\n            return $q(function(resolve, reject) {\r\n                rootDirecotry.rawData.getFile('log.txt', { create: false }, function(fileEntry) {\r\n                    resolve(fileEntry);\r\n                }, function(error) {\r\n                    reject(error.message);\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n});\r\n","angular.module(\"sp-app\").factory(\"html5Storage\", function ($q) {\r\n    \r\n    return {\r\n        set: function (key, obj) {\r\n            var o = {};\r\n            o[key] = obj;\r\n            \r\n            localStorage.setItem(key, JSON.stringify(o));\r\n        },\r\n        get: function (key) {\r\n            return $q(function (resolve, reject) {\r\n                var obj = JSON.parse(localStorage.getItem(key));\r\n                var retVal = {};\r\n                if(obj) {\r\n                    retVal = obj;\r\n                }\r\n                resolve(retVal[key]); \r\n            });\r\n        },\r\n        remove: function(key) {\r\n            return $q(function(resolve, reject){\r\n                localStorage.removeItem(key);\r\n                resolve();\r\n            })\r\n        }\r\n        \r\n    };\r\n});","angular.module('sp-app').factory('library', function(Track, Album, Artist, player, loader, Cloud, Playlist, toast, fileSystem,  searchService, playlistsRepository, tracksRepository, $rootScope, configFactory) {\r\n    var allTracks = [];\r\n    var allAlbums = [];\r\n    var allArtists = [];\r\n    var allPlaylists = [];\r\n    var allClouds = [];\r\n\r\n    var allTempTracks = [];\r\n\r\n\r\n    var currentTrack = null;\r\n\r\n    var currentOpenAlbum = null;\r\n    var currentOpenArtist = null;\r\n    var currentOpenPlaylist = null;\r\n    var currentOpenCloud = null;\r\n\r\n    var queueList = [];\r\n\r\n\r\n\r\n\r\n\r\n    var searchResult = undefined;\r\n    var searchValue = undefined;\r\n    player.onEnd(onPlayEnd);\r\n\r\n\r\n    function getArtistByName(artistName) {\r\n        return _.find(allArtists, function(artist) {\r\n            return artist.name.toLowerCase() === artistName.toLowerCase();\r\n        });\r\n    }\r\n\r\n    function getAlbumByName(albumName, artistName) {\r\n        return _.find(allAlbums, function(album) {\r\n            return album.name.toLowerCase() === albumName.toLowerCase() && album.artist.name.toLowerCase() === artistName.toLowerCase();\r\n        });\r\n    }\r\n\r\n    function getCloudByName(cloudName) {\r\n        return _.find(allClouds, function(cloud) {\r\n            return cloud.name.toLowerCase() === cloudName.toLowerCase();\r\n        });\r\n    }\r\n\r\n    function updateQueueData() {\r\n\r\n\r\n        tracksRepository.getAllTracks().then(function(tracksResult) {\r\n            for (var i = 0; i < tracksResult.length; i++) {\r\n                var queueItem = _.find(queueList, function(item) {\r\n                    return item.id == tracksResult[i].id\r\n                });\r\n                var position = queueList ? queueList.indexOf(queueItem) : null;\r\n                tracksRepository.updateTrack({\r\n                    id: tracksResult[i].id,\r\n                    metadata: tracksResult[i].metadata,\r\n                    queueIndex: position,\r\n                    isPlaying: tracksResult[i].isPlaying,\r\n                    createdDate: tracksResult[i].createdDate\r\n                });\r\n\r\n            }\r\n            console.log(\"Queue was updated\");\r\n        });\r\n\r\n\r\n    }\r\n    var debounced = _.debounce(updateQueueData, 2000);\r\n    playlistsRepository.openConnection().then(function() {\r\n        playlistsRepository.getAllPlaylists().then(function(result) {\r\n            result.forEach(function(plistRecord) {\r\n                var playlist = new Playlist(plistRecord.id);\r\n                playlist.dataMapping.tracks = plistRecord.tracks;               \r\n                allPlaylists.push(playlist);\r\n            })\r\n           \r\n        })\r\n    })\r\n    var libObj = {\r\n        addMusicFiles: function(musicFiles, musicStorage) {\r\n           \r\n            tracksRepository.openConnection().then(function() {\r\n\r\n               \r\n                var tracks = musicFiles.map(function(musicFile) {\r\n                    var track = new Track(musicFile);\r\n\r\n                    tracksRepository.getMetadata(musicStorage, track).then(function(result) {\r\n                        \r\n                        var metadata = result.metadata;\r\n                        track.duration = metadata.duration;\r\n                        track.number = metadata.track;\r\n                        track.title = metadata.title || track.title;\r\n                        var artistName = metadata.artist || 'Unknown Artist';\r\n                        var artist = getArtistByName(artistName);\r\n                        if (!artist) {\r\n                            artist = new Artist(artistName);\r\n                            allArtists.push(artist);\r\n                        }\r\n                        var albumName = metadata.album || 'Unknown Album';\r\n                        var album = getAlbumByName(albumName, artistName);\r\n                        if (!album) {\r\n                            album = new Album(albumName);\r\n                            allAlbums.push(album);\r\n                            artist.addAlbum(album);\r\n                            if (metadata.attachedImages && metadata.attachedImages.length > 0) {\r\n\r\n                                album.albumArtPath = fileSystem.obtainURL(metadata.attachedImages[0]);\r\n                            }\r\n                        }\r\n\r\n\r\n                        album.addTrack(track);\r\n\r\n\r\n                        // Update track if it exists in DB, otherwise create one\r\n                        if (!result.id) {\r\n                            tracksRepository.updateTrack({\r\n                                id: track.id,\r\n                                \"metadata\": metadata,\r\n                                \"createdDate\": (new Date()).getTime()\r\n                            });\r\n                        }\r\n                      \r\n                        // Assign tracks to an appropriate playlists\r\n                        allPlaylists.forEach(function(playlist) {\r\n                                if (playlist.dataMapping.tracks.indexOf(track.id) != -1) {\r\n                                    playlist.tracks.push(track);\r\n                                }\r\n                            })\r\n                            //Check if a track is in queue list\r\n                        if (result.queueIndex != null && result.queueIndex != undefined) {\r\n                            queueList.push(track);\r\n                        }\r\n                        if (result.isPlaying) {                            \r\n                            libObj.loadTrack(track);\r\n                        }\r\n\r\n\r\n\r\n                        if (!track.duration) {\r\n                            player.obtainDuration(track).then(function(duration) {\r\n                                track.duration = duration;\r\n                                metadata.duration = duration;\r\n                                // $rootScope.$apply();\r\n                            });\r\n                        } else {\r\n                            // $rootScope.$apply();\r\n                        }\r\n                    })\r\n                    return track;\r\n                }.bind(this));\r\n                tracks.forEach(function(t) {\r\n\r\n                    allTracks.push(t);\r\n                })\r\n             \r\n            });\r\n\r\n\r\n            // $rootScope.$broadcast('tracks-added', allTracks);\r\n        },\r\n        addFileToDirectory: function(file, mediaStorage) {\r\n            this.addMusicFiles([file], mediaStorage);\r\n        },\r\n        removeTrack: function(track) {\r\n            _.remove(allTracks, track);\r\n            if (currentTrack == track) {\r\n                this.unloadCurrentTrack();\r\n            }\r\n            var album = track.album;\r\n            album.removeTrack(track);\r\n            if (album.tracks.length === 0) {\r\n                var artist = album.artist;\r\n                artist.removeAlbum(album);\r\n                _.remove(allAlbums, album);\r\n                if (artist.albums.length === 0) {\r\n                    _.remove(allArtists, artist);\r\n                }\r\n            }\r\n            _.remove(queueList, track);\r\n            tracksRepository.removeTrack(track);\r\n            this.removeFromAllPlaylists(track);\r\n        },\r\n        removeCloud: function(cloud) {\r\n            _.remove(allClouds, cloud);\r\n            // cloud.remove();\r\n            cloud.tracks.forEach(function(track) {\r\n                this.removeTrack(track);\r\n            }.bind(this));\r\n\r\n        },\r\n        removeAllTracks: function() {\r\n            allTracks.forEach(function(track) {\r\n                this.removeTrack(track);\r\n            }.bind(this));\r\n        },\r\n        removeAllClouds: function() {\r\n            allClouds.forEach(function(cloud) {\r\n                this.removeCloud(cloud);\r\n            }.bind(this));\r\n        },\r\n        addPlaylist: function(playlist) {\r\n            var existingPlaylist = _.find(allPlaylists, function(plist) {\r\n                return plist.name.toLowerCase() == playlist.name.toLowerCase();\r\n            })\r\n            if (existingPlaylist) {                \r\n                toast.show({content: \"The playlist <b>\" + playlist.name + \"</b> already exists\"})\r\n                return false;\r\n            }\r\n            allPlaylists.push(playlist);\r\n            var trackIds = playlist.tracks.map(function(track) {\r\n\r\n\r\n                return track.id;\r\n            });\r\n\r\n            playlistsRepository.addPlaylist({ id: playlist.name, tracks: trackIds, \"createdDate\": (new Date()).getTime() });\r\n            toast.show({content: \"The playlist <b>\" + playlist.name + \"</b> has been successfully created\"})\r\n            return true;\r\n        },\r\n        removePlaylist: function(playlist) {\r\n\r\n            _.remove(allPlaylists, playlist);\r\n            playlistsRepository.removePlaylist(playlist);\r\n        },\r\n        removePlaylists: function() { \r\n            allPlaylists.forEach(function(p){\r\n                 playlistsRepository.removePlaylist(p);\r\n            })\r\n            allPlaylists = [];\r\n        },\r\n        nextTrack: function() {\r\n            var currentTrackIndex = queueList.indexOf(currentTrack);\r\n            playback = configFactory.configuration.playback;\r\n            var nextIndex = 0;\r\n            if (playback.shuffle) {\r\n                var nextIndex = Math.floor(Math.random() * queueList.length);\r\n            } else {\r\n                var nextIndex = (((currentTrackIndex + 1) % queueList.length) + queueList.length) % queueList.length;\r\n            }\r\n            this.playTrack(queueList[nextIndex]);\r\n        },\r\n        prevTrack: function() {\r\n            playback = configFactory.configuration.playback;\r\n            var currentTrackIndex = queueList.indexOf(currentTrack);\r\n            var nextIndex = 0;\r\n            if (playback.shuffle) {\r\n                var nextIndex = Math.floor(Math.random() * queueList.length);\r\n            } else {\r\n                nextIndex = (((currentTrackIndex - 1) % queueList.length) + queueList.length) % queueList.length;\r\n            }\r\n            this.playTrack(queueList[nextIndex]);\r\n        },\r\n        playTrack: function(track) {\r\n            if (currentTrack && currentTrack.trackRecord) {\r\n                tracksRepository.getTrack(currentTrack.id, currentTrack).then(function(result) {\r\n                    tracksRepository.updateTrack({\r\n                        id: result.track.id,\r\n                        metadata: result.trackRecord.metadata,\r\n                        queueIndex: result.trackRecord.queueIndex,\r\n                        createdDate: result.trackRecord.createdDate,\r\n                        isPlaying: null\r\n                    })\r\n                })\r\n            }\r\n            if (currentTrack && !currentTrack.cloud) {\r\n                fileSystem.removeURL(currentTrack.src);\r\n                currentTrack.src = \"\";\r\n            }\r\n            currentTrack = track;\r\n            \r\n            player.volumeOut(function() {\r\n                if (!track.src) {\r\n                    currentTrack.src = fileSystem.obtainURL(currentTrack.file);\r\n                }\r\n                player.load(currentTrack);\r\n                player.play();\r\n                if(track.trackRecord) {\r\n                    tracksRepository.getTrack(currentTrack.id, track).then(function(result) {\r\n                        tracksRepository.updateTrack({\r\n                            id: result.track.id,\r\n                            metadata: result.trackRecord.metadata,\r\n                            queueIndex: result.trackRecord.queueIndex,\r\n                            createdDate: result.trackRecord.createdDate,\r\n                            isPlaying: true\r\n                        })\r\n                    });\r\n                }\r\n            })\r\n\r\n\r\n        },\r\n        loadTrack: function(track) {\r\n            player.stop();\r\n            player.pause();\r\n            currentTrack = track;\r\n            if (!track.src) {\r\n                currentTrack.src = fileSystem.obtainURL(currentTrack.file);\r\n            }\r\n            player.load(currentTrack);\r\n        },\r\n        unloadCurrentTrack: function() {\r\n            currentTrack = undefined;\r\n            player.stop();\r\n        },\r\n        setOpenAlbum: function(album) {\r\n            currentOpenAlbum = album;\r\n        },\r\n        setOpenAlbum: function(album) {\r\n            currentOpenAlbum = album;\r\n        },\r\n        setOpenArtist: function(artist) {\r\n            currentOpenArtist = artist;\r\n        },\r\n        setOpenPlaylist: function(playlist) {\r\n            currentOpenPlaylist = playlist;\r\n        },\r\n        setOpenCloud: function(cloud) {\r\n            currentOpenCloud = cloud;\r\n        },\r\n        setQueue: function(tracks) {\r\n            queueList = [];\r\n            tracks.forEach(function(t) {\r\n                libObj.addToQueue(t, true);\r\n\r\n            })\r\n            debounced();\r\n        },\r\n        clearQueue: function() {\r\n            while(queueList.length!=0) {\r\n                this.removeFromQueue(queueList[queueList.length-1])\r\n            }\r\n        },\r\n        getOpenPlaylist: function() {\r\n            return currentOpenPlaylist;\r\n        },\r\n        getOpenCloud: function() {\r\n            return currentOpenCloud;\r\n        },\r\n        getOpenAlbum: function() {\r\n            return currentOpenAlbum;\r\n        },\r\n        getOpenArtist: function() {\r\n            return currentOpenArtist;\r\n        },\r\n        getCurrentTrack: function() {\r\n            return currentTrack;\r\n        },\r\n        getTracks: function() {\r\n            // console.log('tracks has been requested');\r\n            return allTracks;\r\n        },\r\n        getAlbums: function() {\r\n            // console.log('albums has been requested');\r\n            return allAlbums;\r\n        },\r\n        getArtists: function() {\r\n            // console.log('artists has been requested');\r\n            return allArtists;\r\n        },\r\n        getPlaylists: function() {\r\n            // console.log('artists has been requested');\r\n            return allPlaylists;\r\n        },\r\n        getClouds: function() {\r\n            // console.log('artists has been requested');\r\n            return allClouds;\r\n        },\r\n        getQueue: function() {\r\n            return queueList;\r\n        },\r\n        getSearchResult: function() {\r\n            return searchResult;\r\n        },\r\n        addToQueue: function(track, disableSync) {\r\n            if (queueList.indexOf(track) == -1) {\r\n                queueList.push(track);\r\n\r\n                if (!disableSync) {\r\n                    tracksRepository.getTrack(track.id, track, queueList.length).then(function(result) {\r\n                        tracksRepository.updateTrack({\r\n                            id: result.track.id,\r\n                            metadata: result.trackRecord.metadata,\r\n                            queueIndex: result.metadata,\r\n                            createdDate: result.trackRecord.createdDate,\r\n                            isPlaying: result.trackRecord.isPlaying\r\n                        })\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                console.log('The song exists');\r\n            }\r\n        },\r\n        removeFromQueue: function(track) {\r\n            if (currentTrack == track) {\r\n                this.unloadCurrentTrack();\r\n            }\r\n            _.remove(queueList, track);\r\n            tracksRepository.getTrack(track.id, track).then(function(result) {\r\n                tracksRepository.updateTrack({\r\n                    id: result.track.id,\r\n                    metadata: result.trackRecord.metadata,\r\n                    queueIndex: null,\r\n                    createdDate: result.trackRecord.createdDate,\r\n                    isPlaying: null\r\n                })\r\n            })\r\n\r\n        },\r\n        addToPlaylist: function(track, playlist) {\r\n\r\n            if (playlist.tracks.indexOf(track) == -1) {\r\n                playlist.tracks.push(track);\r\n                if(!playlist.dataMapping.tracks) {\r\n                    playlist.dataMapping.tracks = [];\r\n                }\r\n                playlist.dataMapping.tracks.push(track.id)\r\n                playlistsRepository.getPlaylist(playlist).then(function(result) {\r\n                    if (result.playlistRecord) {\r\n                        result.playlistRecord.tracks.push(track.id);\r\n\r\n                        playlistsRepository.updatePlaylist({\r\n                            id: result.playlistRecord.id,\r\n                            tracks: result.playlistRecord.tracks,\r\n                            \"createdDate\": result.playlistRecord.createdDate\r\n                        })\r\n\r\n                    }\r\n                })\r\n            } else {\r\n                console.log('The song exists');\r\n            }\r\n        },\r\n        removeFromPlaylist: function(track, playlist) {\r\n\r\n            _.remove(playlist.tracks, track);\r\n            playlistsRepository.getPlaylist(playlist).then(function(result) {\r\n                if (result.playlistRecord) {\r\n                    var trackIds = [];\r\n                    trackIds = playlist.tracks.map(function(t) {\r\n                        return t.id;\r\n                    })\r\n                    playlist.dataMapping.tracks = trackIds;\r\n\r\n                    playlistsRepository.updatePlaylist({\r\n                        id: result.playlistRecord.id,\r\n                        tracks: trackIds,\r\n                        \"createdDate\": result.playlistRecord.createdDate\r\n                    })\r\n\r\n                }\r\n            })\r\n\r\n\r\n        },\r\n        removeFromAllPlaylists: function(track) {\r\n            var self = this;\r\n            allPlaylists.forEach(function(playlist) {\r\n                self.removeFromPlaylist(track, playlist);\r\n            })\r\n        },\r\n        addToCloud: function(track, user) {\r\n\r\n            var cloud = getCloudByName(track.metadata.cloud);\r\n\r\n            if (!cloud) {\r\n                cloud = new Cloud(track.metadata.cloud);\r\n                allClouds.push(cloud);\r\n            }\r\n            cloud.user = user;\r\n            cloud.addTrack(track);\r\n        },\r\n        // createSuggestion: function(keyword) {\r\n        //     var artistsResult = searchService.search(this.getArtists(), keyword, \"name\");\r\n        //     var albumsResult = searchService.search(this.getAlbums(), keyword, \"name\");\r\n        //     var songsResult = searchService.search(this.getTracks(), keyword, \"title\");\r\n        //     searchResult = {\r\n        //         artists: artistsResult,\r\n        //         albums: albumsResult,\r\n        //         songs: songsResult\r\n        //     }\r\n        // },\r\n        setSearchValue: function(keyword) {\r\n            searchValue = keyword;\r\n        },\r\n        getSearchValue: function() {\r\n            return searchValue;\r\n        },\r\n        getCloudByName: getCloudByName,\r\n        temporary: {\r\n            addMusicFiles: function(musicFiles, musicStorage) {\r\n\r\n                var tracks = musicFiles.map(function(musicFile) {\r\n                    var track = new Track(musicFile);\r\n\r\n                    musicStorage.getMetadata(track).then(function(metadata) {\r\n                        track.duration = metadata.duration;\r\n                        track.title = metadata.title || track.title;\r\n\r\n                        var artistName = metadata.artist || 'Unknown Artist';\r\n                        var artist = new Artist(artistName);\r\n\r\n\r\n                        var albumName = metadata.album || 'Unknown Album';\r\n                        album = new Album(albumName);\r\n                        artist.addAlbum(album);\r\n\r\n                        if (metadata.attachedImages && metadata.attachedImages.length > 0) {\r\n\r\n                            album.albumArtPath = fileSystem.createObjectURL(metadata.attachedImages[0]);\r\n                        }\r\n\r\n\r\n                        album.addTrack(track);\r\n\r\n                        if (!track.duration) {\r\n                            player.obtainDuration(track).then(function(duration) {\r\n                                track.duration = duration;\r\n                                metadata.duration = duration;\r\n                                // $rootScope.$apply();\r\n                            });\r\n                        } else {\r\n                            // $rootScope.$apply();\r\n                        }\r\n                    })\r\n                    return track;\r\n                }.bind(this));\r\n                tracks.forEach(function(t) {\r\n                    allTempTracks.push(t);\r\n                    queueList.push(t);\r\n                })\r\n\r\n                // $rootScope.$broadcast('tracks-added', allTracks);\r\n            },\r\n            getTempTracks: function() {\r\n                // console.log('tracks has been requested');\r\n                return allTempTracks;\r\n            }\r\n        }\r\n    };\r\n\r\n    function onPlayEnd() {\r\n        var playback = configFactory.configuration.playback;\r\n        if (playback.repeat == player.repeatModes.noRepeat) {\r\n            player.pause();\r\n        } else if (playback.repeat == player.repeatModes.repeatAll) {\r\n            libObj.nextTrack();\r\n        } else {\r\n            libObj.playTrack(currentTrack);\r\n        }\r\n        $rootScope.$apply();\r\n    }\r\n\r\n    return libObj;\r\n});\r\n","angular.module('sp-app').factory('loader', function() {\r\n    \r\n    var loader = null;\r\n    return {\r\n        show: function(options) {\r\n          \r\n\r\n           loader = document.querySelector('.library_loader');\r\n           loader.style.display = 'flex';\r\n\r\n        },\r\n        hide: function() {\r\n           if(!loader) {\r\n                loader =  document.querySelector('.library_loader')\r\n           }\r\n           loader.style.display = 'none'; \r\n        }   \r\n    }\r\n})","angular.module('sp-app').factory('mediaSources', function() {\r\n    var storages = [];\r\n    var currentOpenCloud = undefined;\r\n    return {\r\n        addStorage: function(storage) {\r\n            storages.push(storage);\r\n            \r\n        },\r\n        getStorages: function() {\r\n            return storages;\r\n        },\r\n        getOpenCloud: function() {\r\n        \treturn currentOpenCloud;\r\n        },\r\n        setOpenCloud: function(cloud) {\r\n        \tcurrentOpenCloud = cloud;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n","angular.module('sp-app').factory('dropbox', function($http, File, $q, Cloud, library, storage, Dropbox) {\r\n\r\n    var dropbox = new Dropbox();\r\n\r\n    var username = \"\";\r\n    var dbox = {\r\n        initDrive: function() {\r\n            var deferred = $q.defer();\r\n            var self = this;\r\n\r\n            var musicFiles = [];\r\n            var indicator = 0;\r\n            var config = {\r\n                method: 'POST',\r\n\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + dropbox.accessToken\r\n                }\r\n            }\r\n\r\n            function getFiles(secondTime) {\r\n                $http(config).then(function(result) {\r\n                    if (result && result.data) {\r\n\r\n                        var descriptors = result.data.entries.filter(function(entry) {\r\n                            return entry[1].mime_type === \"audio/mpeg\"\r\n                        });\r\n\r\n                        config.headers['Content-Type'] = \"application/json\";\r\n\r\n                        descriptors.forEach(function(descriptor) {\r\n                            indicator++;\r\n                            config.url = dropbox.METADATA;\r\n                            config.data = {\r\n                                path: descriptor[0]\r\n                            }\r\n                            $http(config).then(function(metadata) {\r\n                                indicator--;\r\n                                var file = new File(metadata.data);\r\n                                file.id = file.rawData.id;\r\n                                config.url = dropbox.MEDIA + metadata.data.path_lower;\r\n                                musicFiles.push(file);\r\n                                if (indicator === 0) {\r\n                                    var options = {}\r\n                                    options.method = \"POST\";\r\n                                    options.headers = {\r\n                                        'Authorization': 'Bearer ' + dropbox.accessToken\r\n                                    }\r\n\r\n                                    options.url = dropbox.USER;\r\n                                    $http(options).then(function(user) {\r\n                                        username = user.data.email;\r\n                                        deferred.resolve({\r\n                                            source: self,\r\n                                            musicFiles: musicFiles,\r\n                                            name: \"Dropbox\"\r\n                                        });\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                        })\r\n\r\n                    }\r\n                }, function(error) {\r\n                    if (error && error.status == 401 && !secondTime) {\r\n                        dropbox.auth().then(function() {\r\n                            config.headers['Authorization'] = 'Bearer ' + dropbox.accessToken;\r\n                            getFiles(true);\r\n                        });\r\n                    }\r\n                })\r\n            }\r\n\r\n\r\n\r\n\r\n            config.url = dropbox.DELTA;\r\n            getFiles();\r\n            return deferred.promise;\r\n        },\r\n        remove: function() {\r\n            if (dropbox) {\r\n                dropbox.remove();\r\n            }\r\n\r\n        },\r\n        getMetadata: function(track) {\r\n            var file = track.file;\r\n            var deffered = $q.defer();\r\n            var metadata = {};\r\n\r\n            track.metadata = metadata;\r\n\r\n            metadata.cloud = \"Dropbox\";\r\n            library.addToCloud(track, username);\r\n            var options = {}\r\n            options.method = \"POST\";\r\n            options.headers = {\r\n                'Authorization': 'Bearer ' + dropbox.accessToken\r\n            }\r\n            options.url = dropbox.MEDIA + track.file.rawData.path_lower;\r\n            $http(options).then(function(media) {\r\n                media = media.data;\r\n                track.src = media.url;\r\n                var audio = new Audio();\r\n                audio.src = track.src;\r\n                audio.addEventListener('loadedmetadata', function() {\r\n                    metadata.duration = audio.duration;\r\n                    audio = null;\r\n                    deffered.resolve(metadata);\r\n                });\r\n\r\n            });\r\n\r\n            return deffered.promise;\r\n        },\r\n        type: \"cloud\"\r\n    }\r\n    storage.get('dropbox').then(function(result) {\r\n        if (result) {\r\n            dropbox.accessToken = result;\r\n            dbox.initDrive().then(function(musicStorage) {\r\n                library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n            });\r\n        }\r\n    });\r\n    return dbox;\r\n\r\n})\r\n","angular.module(\"sp-app\").provider(\"Dropbox\", function () {\r\n    \r\n\r\n    this.$get = function (platform, DropboxChrome, DropboxDesktop) {\r\n\r\n        if(platform.getType() == platform.types.chrome) {\r\n            return DropboxChrome;\r\n        } else if(platform.getType() == platform.types.desktop) {\r\n            return DropboxDesktop;\r\n        } \r\n      \r\n    }\r\n\r\n\r\n})","angular.module('sp-app').factory('DropboxChrome', function($q, storage, $http) {\r\n    function Dropbox(options) {\r\n        var authWindow = null;\r\n        var me = this;\r\n        var _accessToken = null;\r\n        var _userId = null;\r\n        Object.defineProperty(this, 'accessToken', {\r\n            set: function(value) {\r\n                storage.set('dropbox', value);\r\n                _accessToken = value;\r\n            },\r\n            get: function() {\r\n                return _accessToken;\r\n            }\r\n        });\r\n        Object.defineProperty(this, 'userId', {\r\n            set: function(value) {\r\n                storage.set('dropbox-userid', value);\r\n                _userId = value;\r\n            },\r\n            get: function() {\r\n                return _userId;\r\n            }\r\n        });\r\n        this.options = options || {\r\n            app_key: 'd9gva19s9015p8l',\r\n            app_secret: \"lpcvsa6i2kplcaf\" // Scopes limit access for OAuth tokens.\r\n        };\r\n        this.ROOT_URL = 'https://api.dropboxapi.com/';\r\n        this.DELTA = this.ROOT_URL + '1/delta';\r\n        this.METADATA = this.ROOT_URL + \"2/files/get_metadata\";\r\n        this.USER = this.ROOT_URL + \"2/users/get_current_account\";\r\n        this.DOWNLOAD = this.ROOT_URL + \"2/files/download\";\r\n        this.MEDIA = this.ROOT_URL + \"1/media/auto/\";\r\n\r\n        this.auth = function() {\r\n\r\n            var deffered = $q.defer();\r\n            var redirectUrl = chrome.identity.getRedirectURL('salmonplayer');\r\n            var authUrlRppt = 'https://www.dropbox.com/1/oauth2/authorize';\r\n            var authUrl = `${authUrlRppt}?client_id=${this.options.app_key}&response_type=token&redirect_uri=${redirectUrl}`;\r\n\r\n            var config = {\r\n                url: authUrl,\r\n                interactive: true\r\n            }\r\n            chrome.identity.launchWebAuthFlow(config, function(responseUrl) {\r\n                if (responseUrl) {\r\n\r\n\r\n                    var raw_code = /access_token=([^&]*)/.exec(responseUrl) || null;\r\n                    var raw_user_id = /uid=([^&]*)/.exec(responseUrl) || null;\r\n                    var access_token = (raw_code && raw_code.length > 1) ? raw_code[1] : null;\r\n                    var user_id = (raw_user_id && raw_user_id.length > 1) ? raw_user_id[1] : null;\r\n                    if (access_token) {\r\n                        me.accessToken = access_token;\r\n                        me.userId = user_id;\r\n                        deffered.resolve();\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            })\r\n            return deffered.promise;\r\n        }\r\n        this.remove = function() {\r\n            storage.remove('dropbox');\r\n            storage.remove('dropbox-userid');\r\n            // var redirectUrl = chrome.identity.getRedirectURL('salmonplayer');\r\n            // var url = `https://www.dropbox.com/logout`;\r\n            // var config = {\r\n            //     url: url,\r\n            //     interactive: true\r\n            // }\r\n            chrome.identity.removeCachedAuthToken({\r\n                token: _accessToken\r\n            });\r\n\r\n            // chrome.identity.launchWebAuthFlow(config, function(responseUrl) {\r\n            //     // deffered.resolve();\r\n            // });\r\n            var options = {}\r\n            options.method = \"POST\";\r\n            options.headers = {\r\n                'Authorization': 'Bearer ' + me.accessToken\r\n            }\r\n\r\n            options.url = 'https://api.dropboxapi.com/1/disable_access_token';\r\n            $http(options).then(function(result) {\r\n                console.log(result)\r\n            });\r\n            _accessToken = null;\r\n            _userId = null;\r\n\r\n        }\r\n    }\r\n    return Dropbox;\r\n})\r\n","angular.module('sp-app').factory('DropboxDesktop', function($q, storage) {\r\n    function Dropbox(options) {\r\n        var authWindow = null;\r\n        var me = this;\r\n        var _accessToken = null;\r\n        var _userId = null;\r\n        Object.defineProperty(this, 'accessToken', {\r\n            set: function(value) {\r\n                storage.set('dropbox', value);\r\n                _accessToken = value;\r\n            },\r\n            get: function() {\r\n                return _accessToken;\r\n            }\r\n        });\r\n        Object.defineProperty(this, 'userId', {\r\n            set: function(value) {\r\n                storage.set('dropbox-userid', value);\r\n                _userId = value;\r\n            },\r\n            get: function() {\r\n                return _userId;\r\n            }\r\n        });\r\n        this.options = options || {\r\n            app_key: 'd9gva19s9015p8l',\r\n            app_secret: \"lpcvsa6i2kplcaf\" // Scopes limit access for OAuth tokens.\r\n        };\r\n        this.ROOT_URL = 'https://api.dropboxapi.com/';\r\n        this.DELTA = this.ROOT_URL + '1/delta';\r\n        this.METADATA = this.ROOT_URL + \"2/files/get_metadata\";\r\n        this.USER = this.ROOT_URL + \"2/users/get_current_account\";\r\n        this.DOWNLOAD = this.ROOT_URL + \"2/files/download\";\r\n        this.MEDIA = this.ROOT_URL + \"1/media/auto/\";\r\n        \r\n        this.auth = function() {\r\n            var deffered = $q.defer();\r\n            const BrowserWindow = require('electron').remote.BrowserWindow;\r\n            authWindow = new BrowserWindow({ width: 800, height: 600, show: false, 'node-integration': false });\r\n            var authUrlRppt = 'https://www.dropbox.com/1/oauth2/authorize';\r\n            var authUrl = `${authUrlRppt}?client_id=${this.options.app_key}&response_type=token&redirect_uri=https://eidcnkihddokbdjfdkcocgigmggfpeio.chromiumapp.org/salmonplayer`;\r\n\r\n\r\n            authWindow.loadURL(authUrl);\r\n\r\n            authWindow.show();\r\n\r\n            authWindow.webContents.on('did-frame-finish-load', (event) => {\r\n\r\n                handleCallback(event).then(function() {\r\n                    deffered.resolve();\r\n                });\r\n            });\r\n            authWindow.on('close', () => {\r\n                this.authWindow = null;\r\n            }, false);\r\n            return deffered.promise;\r\n        }\r\n\r\n        this.remove = function() {\r\n            storage.remove('dropbox');\r\n            storage.remove('dropbox-userid');\r\n            _accessToken = null;\r\n            _userId = null;\r\n            var remote = require('electron').remote;\r\n            var session = remote.session;\r\n            session.defaultSession.cookies.get({}, (error, cookies) => {\r\n\r\n                cookies.forEach((cookie) => {\r\n\r\n                    if (cookie.domain.indexOf('dropbox.com') != -1) {\r\n                        var url = \"http\" + (cookie.secure ? \"s\" : \"\") + \"://\" + cookie.domain + cookie.path;\r\n                        session.defaultSession.cookies.remove(url, cookie.name, () => {});\r\n                    }\r\n                })\r\n            });\r\n        }\r\n\r\n        function handleCallback(event) {\r\n            var deffered = $q.defer();\r\n            var title = event.sender.getURL();\r\n            var raw_code = /access_token=([^&]*)/.exec(title) || null;\r\n            var raw_user_id = /uid=([^&]*)/.exec(title) || null;\r\n            var access_token = (raw_code && raw_code.length > 1) ? raw_code[1] : null;\r\n            var user_id = (raw_user_id && raw_user_id.length > 1) ? raw_user_id[1] : null;\r\n            if (access_token) {\r\n                authWindow.destroy();\r\n                me.accessToken = access_token;\r\n                me.userId = user_id;\r\n                deffered.resolve();\r\n\r\n            }\r\n            return deffered.promise;\r\n        }\r\n\r\n    }\r\n    return Dropbox;\r\n})\r\n","angular.module('sp-app').factory('googleDrive', function($http, File, $q, loader, library, storage, $rootScope, GDrive, platform) {\r\n\r\n    var gdocs = new GDrive();\r\n\r\n    var username = \"\";\r\n\r\n    gdrive = {\r\n        initDrive: function() {\r\n\r\n            var self = this;\r\n            var deferred = $q.defer();\r\n            var musicFiles = [];\r\n            var config = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + gdocs.accessToken\r\n                },\r\n                data: {\r\n                    'alt': 'json'\r\n                }\r\n            }\r\n\r\n            function getFiles(queryParameters) {\r\n                if (queryParameters) {\r\n                    config.url = gdocs.FILES + queryParameters;\r\n                }\r\n                $http(config).then(function(result) {\r\n                    var items = result.data.items.filter(function(item) {\r\n                        var extension = item.fileExtension;\r\n                        return platform.isSupportedMediaFormat(extension);\r\n                        \r\n                    });\r\n                    var files = items.map(function(item) {\r\n\r\n                        item.getExtension = function() {\r\n                            return item.fileExtension;\r\n                        };\r\n                        var file = new File(item);\r\n                        file.name = item.originalFilename;\r\n                        file.id = file.rawData.id;\r\n                        return file;\r\n\r\n                    });\r\n\r\n                    musicFiles = musicFiles.concat(files);\r\n\r\n                    if (result.data.nextPageToken) {\r\n                        getFiles('?pageToken=' + result.data.nextPageToken);\r\n                    } else {\r\n                        config.url = gdocs.USER_INFO\r\n                        $http(config).then(function(info) {\r\n\r\n                            username = info.data.user.emailAddress;\r\n                            loader.hide();\r\n                            deferred.resolve({\r\n                                source: self,\r\n                                musicFiles: musicFiles,\r\n                                name: \"Google Drive\"\r\n                            });\r\n                        })\r\n\r\n                    }\r\n\r\n\r\n                }, function(error) {\r\n                    if (error.status == 401) {\r\n\r\n                        if (gdocs.refreshToken) {\r\n                            gdocs.authRefresh().then(function() {\r\n                                config.headers['Authorization'] = 'Bearer ' + gdocs.accessToken;\r\n                                getFiles();\r\n                            });\r\n                        } else {\r\n                            gdocs.auth().then(function() {\r\n                                config.headers['Authorization'] = 'Bearer ' + gdocs.accessToken;\r\n                                getFiles();\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            config.url = gdocs.FILES;\r\n            getFiles();\r\n            // gdocs.auth()           \r\n            return deferred.promise;\r\n        },\r\n        remove: function() {\r\n            if (gdocs) {\r\n                // gdocs.removeCachedAuthToken();\r\n                // gdocs.revokeAuthToken();\r\n                gdocs.remove();\r\n                username = \"\";\r\n                // storage.remove('gdrive');\r\n            }\r\n        },\r\n        getMetadata: function(track) {\r\n            var file = track.file;\r\n            var deffered = $q.defer();\r\n            var metadata = {}\r\n\r\n            track.metadata = metadata;\r\n            metadata.cloud = \"Google Drive\";\r\n\r\n            library.addToCloud(track, username);\r\n\r\n            if (!file) {\r\n                deffered.resolve(metadata);\r\n            } else {\r\n\r\n                var audio = new Audio();\r\n                track.title = file.name;\r\n                track.src = track.file.rawData.downloadUrl + '&access_token=' + gdocs.accessToken;\r\n                audio.src = track.src;\r\n                audio.addEventListener('loadedmetadata', function() {\r\n                    metadata.duration = audio.duration;\r\n                    audio = null;\r\n                    deffered.resolve(metadata);\r\n                });\r\n            }\r\n            return deffered.promise;\r\n        },\r\n        type: \"cloud\"\r\n    }\r\n    storage.get('gdrive').then(function(accessToken) {\r\n        if(accessToken) {\r\n            console.log(accessToken);\r\n            storage.get('gdrive_refresh').then(function(refreshToken) {                \r\n                gdocs.accessToken = accessToken;\r\n                gdocs.refreshToken = refreshToken;\r\n                gdrive.initDrive().then(function(musicStorage) {\r\n                    library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n                });\r\n            });\r\n        }\r\n    })\r\n\r\n    return gdrive;\r\n})\r\n","angular.module(\"sp-app\").provider(\"GDrive\", function () {\r\n    \r\n\r\n    this.$get = function (platform, GDriveChrome, GDriveDesktop) {\r\n\r\n        if(platform.getType() == platform.types.chrome) {\r\n            return GDriveChrome;\r\n        } else if(platform.getType() == platform.types.desktop) {\r\n            return GDriveDesktop;\r\n        } \r\n      \r\n    }\r\n\r\n\r\n})","angular.module('sp-app').factory('GDriveChrome', function($q, storage) {\r\n    function GDrive(options) {      \r\n        var deffered = $q.defer();\r\n        var me = this;\r\n        var _accessToken = null;\r\n        var _refreshToken = null;\r\n        Object.defineProperty(this, 'accessToken', {\r\n            set: function(value) {\r\n                storage.set('gdrive', value);\r\n                _accessToken = value;\r\n            },\r\n            get: function() {\r\n                return _accessToken;\r\n            }\r\n        });\r\n        Object.defineProperty(this, 'refreshToken', {\r\n            set: function(value) {\r\n                storage.set('gdrive_refresh', value);\r\n                _refreshToken = value;\r\n            },\r\n            get: function() {\r\n                return _refreshToken;\r\n            }\r\n        });\r\n        this.options = options || {\r\n            client_id: '118969089660-jp522il1m80lbotde32ojubaqhe53uro.apps.googleusercontent.com',\r\n            client_secret: 'h9F9JD0ddQ7PT3maPrZDgbut',\r\n            scopes: [\"https://www.googleapis.com/auth/drive\"] // Scopes limit access for OAuth tokens.\r\n        };\r\n        this.ROOT_URL = 'https://www.googleapis.com/drive/v2/';\r\n        this.FILES = this.ROOT_URL + 'files';\r\n        this.USER_INFO = this.ROOT_URL + 'about';\r\n        this.auth = function() {\r\n\r\n            var driveUrl = 'https://accounts.google.com/o/oauth2/v2/auth';\r\n            var redirectUrl = chrome.identity.getRedirectURL('salmonplayer');\r\n            var authUrl = `${driveUrl}?response_type=token&client_id=${this.options.client_id}&scope=${this.options.scopes}&redirect_uri=${redirectUrl}`;\r\n            var config = {\r\n                url: authUrl,\r\n                interactive: true\r\n            }\r\n            chrome.identity.launchWebAuthFlow(config, function(responseUrl) {\r\n                if (responseUrl) {\r\n                   \r\n                    me.accessToken = responseUrl.match(/\\#(?:access_token)\\=([\\S\\s]*?)\\&/)[1];\r\n                    deffered.resolve();\r\n\r\n                }\r\n            })\r\n            return deffered.promise;\r\n        }\r\n        this.remove = function() {\r\n            storage.remove('gdrive');\r\n            storage.remove('gdrive_refresh');            \r\n            var redirectUrl = chrome.identity.getRedirectURL('salmonplayer');\r\n            var url = `https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout?continue=`+redirectUrl;\r\n            var config = {\r\n                url: url,\r\n                interactive: true\r\n            }\r\n            chrome.identity.removeCachedAuthToken({\r\n                token: _accessToken\r\n            });\r\n\r\n            chrome.identity.launchWebAuthFlow(config, function(responseUrl) {\r\n                 deffered.resolve();\r\n            });\r\n            _accessToken = null;\r\n            _refreshToken = null;         \r\n        }  \r\n    }\r\n    return GDrive;\r\n})\r\n","angular.module('sp-app').factory('GDriveDesktop', function($q, storage) {\r\n    function GDrive(options) {\r\n        var authWindow = null;\r\n        \r\n        var me = this;\r\n        var _accessToken = null;\r\n        var _refreshToken = null;\r\n        Object.defineProperty(this, 'accessToken', {\r\n            set: function(value) {\r\n                storage.set('gdrive', value);\r\n                _accessToken = value;\r\n            },\r\n            get: function() {\r\n                return _accessToken;\r\n            } \r\n        });\r\n        Object.defineProperty(this, 'refreshToken', {\r\n            set: function(value) {\r\n                storage.set('gdrive_refresh', value);\r\n                _refreshToken = value;\r\n            },\r\n            get: function() {\r\n                return _refreshToken;\r\n            } \r\n        });\r\n        this.options = options || {\r\n            client_id: '118969089660-0qd1s1jdobecfuk4drs1k6a5vjkvc5tj.apps.googleusercontent.com',\r\n            client_secret: 'AdO4W2POd4R1SGnwbfl8kAvA',\r\n            scopes: [\"https://www.googleapis.com/auth/drive\"] // Scopes limit access for OAuth tokens.\r\n        };\r\n        this.ROOT_URL = 'https://www.googleapis.com/drive/v2/';\r\n        this.FILES = this.ROOT_URL + 'files';\r\n        this.USER_INFO = this.ROOT_URL + 'about';\r\n        this.auth = function() {\r\n            var deffered = $q.defer();\r\n            const BrowserWindow = require('electron').remote.BrowserWindow;\r\n            authWindow = new BrowserWindow({ width: 800, height: 600, show: false, 'node-integration': false });\r\n            var driveUrl = 'https://accounts.google.com/o/oauth2/v2/auth';\r\n            var authUrl = `${driveUrl}?response_type=code&client_id=${this.options.client_id}&scope=${this.options.scopes}&redirect_uri=urn:ietf:wg:oauth:2.0:oob&access_type=offline`;\r\n            authWindow.loadURL(authUrl);\r\n            authWindow.show();\r\n            authWindow.webContents.on('did-frame-finish-load', (event) => {\r\n                handleCallback(event).then(function(){\r\n                    deffered.resolve();\r\n                });\r\n            });\r\n            authWindow.on('close', () => {\r\n                this.authWindow = null;\r\n            }, false);\r\n            return deffered.promise;\r\n        }\r\n        this.authRefresh = function() {\r\n            var deffered = $q.defer();\r\n            var driveUrl = 'https://www.googleapis.com/oauth2/v4/token';\r\n\r\n            var authUrl = `${driveUrl}?grant_type=refresh_token&client_id=${me.options.client_id}&client_secret=${me.options.client_secret}&refresh_token=${me.refreshToken}`;\r\n            \r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('POST', authUrl, true);\r\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');  \r\n           \r\n            xhr.onload = function(e) {\r\n\r\n                var responseObj = JSON.parse(this.response);\r\n                if (responseObj && responseObj.access_token) {\r\n                    me.accessToken = responseObj.access_token;                    \r\n                    deffered.resolve();\r\n\r\n                } else {\r\n                    return me.auth();                    \r\n                }\r\n            }\r\n            xhr.send(null);\r\n            return deffered.promise;\r\n        }\r\n        this.remove = function() {\r\n            storage.remove('gdrive');\r\n            storage.remove('gdrive_refresh');\r\n            var remote = require('electron').remote;\r\n            var session = remote.session;\r\n            _accessToken = null;\r\n            _refreshToken = null;\r\n            session.defaultSession.cookies.get({}, (error, cookies) => {\r\n\r\n                cookies.forEach((cookie) => {\r\n                     console.log(\"http\" + (cookie.secure ? \"s\" : \"\") + \"://\" + cookie.domain + cookie.path)\r\n                    if (cookie.domain.indexOf('google') != -1 || cookie.domain.indexOf('youtube') != -1 || cookie.domain.indexOf('doubleclick.net') != -1) {\r\n                        var url = \"http\" + (cookie.secure ? \"s\" : \"\") + \"://\" + cookie.domain + cookie.path;\r\n                        session.defaultSession.cookies.remove(url, cookie.name, () => {});\r\n                    }\r\n                })\r\n            });\r\n\r\n        }\r\n        function handleCallback(event) {\r\n            var deffered = $q.defer();\r\n            var title = event.sender.getTitle();\r\n            var raw_code = /Success code=([^&]*)/.exec(title) || null;\r\n            var code = (raw_code && raw_code.length > 1) ? raw_code[1] : null;\r\n            if (code) {\r\n                authWindow.destroy();\r\n                requestToken(code).then(function(){\r\n                    deffered.resolve();\r\n                });\r\n\r\n            }\r\n            return deffered.promise;\r\n        }\r\n\r\n        function requestToken(code) {\r\n            var deffered = $q.defer();\r\n            var driveUrl = 'https://www.googleapis.com/oauth2/v4/token';\r\n\r\n            var authUrl = `${driveUrl}?grant_type=authorization_code&client_id=${me.options.client_id}&code=${code}&client_secret=${me.options.client_secret}&redirect_uri=urn:ietf:wg:oauth:2.0:oob`;\r\n            \r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('POST', authUrl, true);\r\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');          \r\n            xhr.onload = function(e) {\r\n\r\n                var responseObj = JSON.parse(this.response);\r\n                if (responseObj && responseObj.access_token) {\r\n                    me.accessToken = responseObj.access_token;\r\n                    me.refreshToken = responseObj.refresh_token;\r\n                    deffered.resolve();\r\n\r\n                } else {\r\n                    deffered.reject();\r\n                }\r\n            }\r\n            xhr.send(null);\r\n            return deffered.promise;\r\n\r\n        }\r\n    }\r\n    return GDrive;\r\n})\r\n"," angular.module('sp-app').factory('localStorage', function(fileSystem, loader, toast, $q, $rootScope, library, storage, $timeout, platform, Directory, File) {\r\n     var folders = [];\r\n\r\n     $rootScope.$watch(function() {\r\n         return folders.length;\r\n     }, function() {\r\n         physicalPaths = []\r\n         folders.forEach(function(folder) {\r\n\r\n             physicalPaths.push(folder.physicalPath);\r\n         })\r\n         storage.set('localFilePaths', {\r\n             physicalPaths: physicalPaths\r\n         })\r\n     });\r\n\r\n     var localStorage = {\r\n\r\n\r\n         addFolder: function() {\r\n\r\n             return $q(function(reslove, reject) {\r\n                 fileSystem.chooseLocation().then(function(rootDirectory) {\r\n                     loader.show();\r\n                     folderExists = _.find(physicalPaths, function(physicalPath) {\r\n                         return physicalPath === rootDirectory.physicalPath;\r\n                     })\r\n                     if (!folderExists) {\r\n                         fileSystem.addFolderWatch(rootDirectory, folderContentChanged);\r\n\r\n                         processSelectedFolder(rootDirectory, reslove);\r\n                     }\r\n                 }, function(error) {\r\n                     toast.show({ content: error })\r\n                     loader.hide();\r\n                 })\r\n\r\n             });\r\n         },\r\n         addTemporary: function(entry) {\r\n             loader.show();\r\n             fileSystem.getDisplayPath(entry).then(function(fullPath) {\r\n                 entry.physicalPath = fullPath;\r\n                 if (entry instanceof Directory) {\r\n\r\n                     processTemporaryFolder(entry);\r\n                 } else {\r\n                     processTemporaryFile(entry);\r\n                 }\r\n             })\r\n\r\n\r\n         },\r\n         scanMediaDevices: function(interactive, physicalPaths) {\r\n\r\n             if (!interactive) {\r\n                 interactive = \"if_needed\";\r\n             }\r\n\r\n             return $q(function(reslove, reject) {\r\n                 fileSystem.autoDetect(interactive).then(function(rootDirectories) {\r\n\r\n                     rootDirectories.forEach(function(rootDirectory) {\r\n\r\n                         folderExists = _.find(physicalPaths, function(physicalPath) {\r\n                             return physicalPath === rootDirectory.physicalPath;\r\n                         })\r\n                         if (physicalPaths != undefined) {\r\n                             if (folderExists) {\r\n\r\n                                 fileSystem.addFolderWatch(rootDirectory, folderContentChanged);\r\n                                 processSelectedFolder(rootDirectory, reslove);\r\n                                 _.remove(physicalPaths, folderExists);\r\n                             } else {\r\n                                 fileSystem.removeFolderWatch(rootDirectory);\r\n                             }\r\n                         } else {\r\n                             fileSystem.addFolderWatch(rootDirectory, folderContentChanged);\r\n                             processSelectedFolder(rootDirectory, reslove);\r\n                             _.remove(physicalPaths, folderExists);\r\n                         }\r\n                     })\r\n\r\n                 });\r\n             });\r\n         },\r\n\r\n         removeFolder: function(folder) {\r\n             fileSystem.removeFolderWatch(folder);\r\n             _.remove(folders, folder);\r\n             // $rootScope.$broadcast('folder-deleted', folder);\r\n             var tracks = library.getTracks().filter(function(track) {\r\n                 return track.file.rootDirectory === folder.physicalPath;\r\n             });\r\n             tracks.forEach(function(track) {\r\n                 library.removeTrack(track);\r\n             });\r\n         },\r\n         getFolders: function() {\r\n             return folders;\r\n         },\r\n         getMetadata: function(track) {\r\n            var deffered = $q.defer();\r\n             if (platform.getType() == platform.types.desktop) {\r\n                 var fs = require('fs');\r\n                 var mm = require('musicmetadata');\r\n                 var parser = mm(fs.createReadStream(track.file.physicalPath),{ duration: true }, function(err, result) {\r\n                    if(err) {\r\n                        deffered.resolve({});\r\n                    } else {\r\n                        var metadata = {};\r\n                        if(result.artist.length!=0) {\r\n                            metadata.artist = result.artist[0];\r\n                        }\r\n                        if(result.title) {\r\n                            metadata.title = result.title;\r\n                        }\r\n                        if(result.album) {\r\n                            metadata.album = result.album;\r\n                        }\r\n                        if(result.picture.length!=0) {\r\n                            metadata.attachedImages = result.picture;\r\n                        }\r\n                        if(result.track && result.track.no) {\r\n                            metadata.track = result.track.no;\r\n                        }\r\n                        if(result.duration) {\r\n                            metadata.duration = result.duration;\r\n                        }\r\n                     };\r\n                     deffered.resolve(metadata);\r\n                 });\r\n\r\n             } else { \r\n                 var file = track.file.file;                 \r\n                 var metadata = {};\r\n                 track.metadata = metadata;\r\n                 if (!file) {\r\n                     deffered.resolve({});\r\n                 } else {\r\n                     chrome.mediaGalleries.getMetadata(file, {\r\n                         metadataType: \"all\"\r\n                     }, function(_metadata) {\r\n\r\n                         metadata = _metadata;\r\n                         if (chrome.runtime.lastError) {\r\n\r\n                             deffered.reject(chrome.runtime.lastError);\r\n                         } else {\r\n                             deffered.resolve(metadata);\r\n                         }\r\n                     });\r\n                 }\r\n             }\r\n             return deffered.promise;\r\n         },\r\n         type: \"local\"\r\n     }\r\n\r\n     function addFile(fileToAdd) {\r\n        if(platform.getType() == platform.types.chrome) {\r\n             fileToAdd.rawData.file(function(file) {\r\n\r\n                 fileToAdd.file = file;\r\n                 library.addFileToDirectory(fileToAdd, localStorage);\r\n             });\r\n        } else {\r\n            library.addFileToDirectory(fileToAdd, localStorage);\r\n        }\r\n     }\r\n\r\n     function folderContentChanged(directory) {\r\n\r\n         fileSystem.getEntriesRecursively(directory).then(function(result) {\r\n             var musicFiles = result.fileList.filter(function(item) {\r\n\r\n                 item.rootDirectory = directory.physicalPath;\r\n                 item.physicalPath = item.physicalPath || item.rootDirectory.replace(/\\\\/g, '/') + item.rawData.fullPath;\r\n                 return platform.isSupportedMediaFormat(item.extension);\r\n                 \r\n             });\r\n\r\n             // console.log(musicFiles);\r\n             \r\n             musicFiles.forEach(function(musicFile) {\r\n                var tracks = library.getTracks().filter(function(track) {\r\n                    return track.file.rootDirectory === directory.physicalPath;\r\n                });\r\n                var existingTrack = undefined;\r\n                if(platform.getType() == platform.types.chrome) {\r\n                    existingTrack = _.find(tracks, function(track) {\r\n                         return track.file.rawData.fullPath == musicFile.rawData.fullPath;\r\n                     })\r\n                } else if(platform.getType() == platform.types.desktop){\r\n                    existingTrack = _.find(tracks, function(track) {\r\n                         return track.file.physicalPath == musicFile.physicalPath;\r\n                    })\r\n                }\r\n                if (!existingTrack) {\r\n                    musicFile.local = true;\r\n                    addFile(musicFile);\r\n                }\r\n             });\r\n             tracks.forEach(function(track) {\r\n                 var existingTrack = undefined;\r\n                if(platform.getType() == platform.types.chrome) {\r\n                    existingTrack = _.find(musicFiles, function(musicFile) {\r\n                         return track.file.rawData.fullPath == musicFile.rawData.fullPath;\r\n                    });\r\n                } else if(platform.getType() == platform.types.desktop) {\r\n                    existingTrack = _.find(musicFiles, function(musicFile) {\r\n                         return track.file.physicalPath == musicFile.physicalPath;\r\n                    });\r\n                }\r\n                 if (!existingTrack) {\r\n                     library.removeTrack(track);\r\n                 }\r\n             });\r\n\r\n         }, function(error) {\r\n             if (error.type === fileSystem.errors.not_found) {\r\n                 localStorage.removeFolder(directory);\r\n             }\r\n\r\n         })\r\n     }\r\n\r\n     function processTemporaryFile(file) {\r\n         if (platform.isSupportedMediaFormat(file.extension)) {\r\n             fileSystem.obtainFiles([file]).then(function() {\r\n\r\n                 $rootScope.$broadcast('temp-storage-added', {\r\n                     source: localStorage,\r\n                     musicFiles: [file]\r\n                 })\r\n             });\r\n         } else {\r\n            loader.hide();\r\n         }\r\n     }\r\n\r\n     function processTemporaryFolder(rootDirectory) {\r\n         fileSystem.getEntriesRecursively(rootDirectory).then(function(result) {\r\n\r\n             var musicFiles = result.fileList.filter(function(item) {\r\n\r\n                 item.rootDirectory = rootDirectory.physicalPath;\r\n                 item.physicalPath = item.physicalPath || item.rootDirectory.replace(/\\\\/g, '/') + item.rawData.fullPath;\r\n                 return platform.isSupportedMediaFormat(item.extension);\r\n             });\r\n\r\n             // folders.push(rootDirectory);\r\n\r\n             fileSystem.obtainFiles(musicFiles).then(function() {\r\n\r\n                 $rootScope.$broadcast('temp-storage-added', {\r\n                     source: localStorage,\r\n                     musicFiles: musicFiles\r\n                 })\r\n             });\r\n             loader.hide();\r\n\r\n\r\n         });\r\n     }\r\n\r\n     function processSelectedFolder(rootDirectory, resolve) {\r\n\r\n         fileSystem.getEntriesRecursively(rootDirectory).then(function(result) {\r\n\r\n             var musicFiles = result.fileList.filter(function(item) {\r\n\r\n                 item.rootDirectory = rootDirectory.physicalPath;\r\n                 item.physicalPath = item.physicalPath || item.rootDirectory.replace(/\\\\/g, '/') + item.rawData.fullPath;\r\n                 return platform.isSupportedMediaFormat(item.extension) \r\n             });\r\n\r\n             folders.push(rootDirectory);\r\n\r\n             fileSystem.obtainFiles(musicFiles).then(function() {\r\n\r\n                 $rootScope.$broadcast('storage-added', {\r\n                     source: localStorage,\r\n                     musicFiles: musicFiles\r\n                 })\r\n             });\r\n             loader.hide();\r\n\r\n\r\n         });\r\n     }\r\n     storage.get('localFilePaths').then(function(localFolderPaths) {\r\n         if (localFolderPaths && localFolderPaths.physicalPaths && localFolderPaths.physicalPaths.length!=0) {\r\n             localStorage.scanMediaDevices(\"no\", localFolderPaths.physicalPaths);\r\n         }\r\n     });\r\n\r\n\r\n     return localStorage;\r\n })\r\n","angular.module('sp-app').factory('oneDrive', function($http, File, $q, loader, library, storage, $rootScope, OneDrive) {\r\n\r\n    var oneDrive = new OneDrive();\r\n\r\n    var username = \"\";\r\n\r\n    onedrive = {\r\n        initDrive: function() {\r\n\r\n            var self = this;\r\n            var deferred = $q.defer();\r\n            var musicFiles = [];\r\n            var config = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + oneDrive.accessToken\r\n                }\r\n            }\r\n\r\n            function getFiles(queryParameters) {\r\n                if (queryParameters) {\r\n                    config.url = oneDrive.FILES + queryParameters;\r\n                }\r\n                $http(config).then(function(result) {\r\n                    result.data.value.forEach(function(item){\r\n                        if(item.audo) {\r\n                            // console.log(item);\r\n                        }\r\n                        if(item.folder) {\r\n                             console.log(item);\r\n                        }\r\n                    })\r\n                    var items = result.data.items.filter(function(item) {\r\n                        var extension = item.fileExtension;\r\n                        return extension === 'mp3' || extension === 'wav' || extension === 'ogg';\r\n                    });\r\n                    var files = items.map(function(item) {\r\n\r\n                        item.getExtension = function() {\r\n                            return item.fileExtension;\r\n                        };\r\n                        var file = new File(item);\r\n                        file.name = item.originalFilename;\r\n                        file.id = file.rawData.id;\r\n                        return file;\r\n\r\n                    });\r\n\r\n                    musicFiles = musicFiles.concat(files);\r\n\r\n                    if (result.data.nextPageToken) {\r\n                        getFiles('?pageToken=' + result.data.nextPageToken);\r\n                    } else {\r\n                        config.url = oneDrive.USER_INFO\r\n                        $http(config).then(function(info) {\r\n\r\n                            username = info.data.user.emailAddress;\r\n                            loader.hide();\r\n                            deferred.resolve({\r\n                                source: self,\r\n                                musicFiles: musicFiles,\r\n                                name: \"One Drive\"\r\n                            });\r\n                        })\r\n\r\n                    }\r\n\r\n\r\n                }, function(error) {\r\n                    if (error.status == 401) {\r\n\r\n                        if (oneDrive.refreshToken) {\r\n                            oneDrive.authRefresh().then(function() {\r\n                                config.headers['Authorization'] = 'Bearer ' + oneDrive.accessToken;\r\n                                getFiles();\r\n                            });\r\n                        } else {\r\n                            oneDrive.auth().then(function() {\r\n                                config.headers['Authorization'] = 'Bearer ' + oneDrive.accessToken;\r\n                                getFiles();\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            config.url = oneDrive.CHILDREN+\"children\";\r\n            getFiles();\r\n            // oneDrive.auth()           \r\n            return deferred.promise;\r\n        },\r\n        remove: function() {\r\n            if (oneDrive) {\r\n                // oneDrive.removeCachedAuthToken();\r\n                // oneDrive.revokeAuthToken();\r\n                oneDrive.remove();\r\n                username = \"\";\r\n                // storage.remove('gdrive');\r\n            }\r\n        },\r\n        getMetadata: function(track) {\r\n            var file = track.file;\r\n            var deffered = $q.defer();\r\n            var metadata = {}\r\n\r\n            track.metadata = metadata;\r\n            metadata.cloud = \"Google Drive\";\r\n\r\n            library.addToCloud(track, username);\r\n\r\n            if (!file) {\r\n                deffered.resolve(metadata);\r\n            } else {\r\n\r\n                var audio = new Audio();\r\n                track.title = file.name;\r\n                track.src = track.file.rawData.downloadUrl + '&access_token=' + oneDrive.accessToken;\r\n                audio.src = track.src;\r\n                audio.addEventListener('loadedmetadata', function() {\r\n                    metadata.duration = audio.duration;\r\n                    audio = null;\r\n                    deffered.resolve(metadata);\r\n                });\r\n            }\r\n            return deffered.promise;\r\n        },\r\n        type: \"cloud\"\r\n    }\r\n    storage.get('onedrive').then(function(accessToken) {\r\n        if(accessToken) {\r\n            console.log(accessToken);\r\n            storage.get('one_refresh').then(function(refreshToken) {                \r\n                oneDrive.accessToken = accessToken;\r\n                oneDrive.refreshToken = refreshToken;\r\n                onedrive.initDrive().then(function(musicStorage) {\r\n                    library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n                });\r\n            });\r\n        }\r\n    })\r\n\r\n    return onedrive;\r\n})\r\n","angular.module(\"sp-app\").provider(\"OneDrive\", function () {\r\n    \r\n\r\n    this.$get = function (platform, OneDriveChrome, OneDriveDesktop) {\r\n\r\n        if(platform.getType() == platform.types.chrome) {\r\n            return OneDriveChrome;\r\n        } else if(platform.getType() == platform.types.desktop) {\r\n            return OneDriveDesktop;\r\n        } \r\n      \r\n    }\r\n\r\n\r\n})","angular.module('sp-app').factory('OneDriveChrome', function($q, storage) {\r\n    function OneDrive(options) {      \r\n        var deffered = $q.defer();\r\n        var me = this;\r\n        var _accessToken = null;\r\n        var _refreshToken = null;\r\n        Object.defineProperty(this, 'accessToken', {\r\n            set: function(value) {\r\n                // storage.set('onedrive', value);\r\n                _accessToken = value;\r\n            },\r\n            get: function() {\r\n                return _accessToken;\r\n            }\r\n        });\r\n        Object.defineProperty(this, 'refreshToken', {\r\n            set: function(value) {\r\n                storage.set('one_refresh', value);\r\n                _refreshToken = value;\r\n            },\r\n            get: function() {\r\n                return _refreshToken;\r\n            }\r\n        });\r\n        this.options = options || {\r\n            client_id: '8788a8aa-04ba-4e7b-9d95-bb6789505285',\r\n           \r\n            scopes: \"onedrive.readonly offline_access\" // Scopes limit access for OAuth tokens.\r\n        };\r\n        this.ROOT_URL = 'https://api.onedrive.com/v1.0/';\r\n\r\n        this.CHILDREN = this.ROOT_URL + 'drive/root/';\r\n        this.USER_INFO = this.ROOT_URL + 'about';\r\n        this.auth = function() {\r\n\r\n            var driveUrl = 'https://accounts.google.com/o/oauth2/v2/auth';\r\n            var redirectUrl = chrome.identity.getRedirectURL('salmonplayer');\r\n            \r\n            var authUrl = `https://login.live.com/oauth20_authorize.srf?client_id=${this.options.client_id}&scope=${this.options.scopes}\r\n    &response_type=token&redirect_uri=${redirectUrl}`;\r\n            var config = {\r\n                url: authUrl,\r\n                interactive: true\r\n            }\r\n            chrome.identity.launchWebAuthFlow(config, function(responseUrl) {\r\n                if (responseUrl) {\r\n                   \r\n                    me.accessToken = responseUrl.match(/\\#(?:access_token)\\=([\\S\\s]*?)\\&/)[1];\r\n                    deffered.resolve();\r\n\r\n                }\r\n            })\r\n            return deffered.promise;\r\n        }\r\n        this.remove = function() {\r\n            storage.remove('gdrive');\r\n            storage.remove('gdrive_refresh');            \r\n            var redirectUrl = chrome.identity.getRedirectURL('salmonplayer');\r\n            var url = `https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout?continue=`+redirectUrl;\r\n            var config = {\r\n                url: url,\r\n                interactive: true\r\n            }\r\n            chrome.identity.removeCachedAuthToken({\r\n                token: _accessToken\r\n            });\r\n\r\n            chrome.identity.launchWebAuthFlow(config, function(responseUrl) {\r\n                 deffered.resolve();\r\n            });\r\n            _accessToken = null;\r\n            _refreshToken = null;         \r\n        }  \r\n    }\r\n    return OneDrive;\r\n})\r\n","angular.module('sp-app').factory('OneDriveDesktop', function($q, storage) {\r\n    function GDrive(options) {\r\n        var authWindow = null;\r\n        \r\n        var me = this;\r\n        var _accessToken = null;\r\n        var _refreshToken = null;\r\n        Object.defineProperty(this, 'accessToken', {\r\n            set: function(value) {\r\n                storage.set('gdrive', value);\r\n                _accessToken = value;\r\n            },\r\n            get: function() {\r\n                return _accessToken;\r\n            } \r\n        });\r\n        Object.defineProperty(this, 'refreshToken', {\r\n            set: function(value) {\r\n                storage.set('gdrive_refresh', value);\r\n                _refreshToken = value;\r\n            },\r\n            get: function() {\r\n                return _refreshToken;\r\n            } \r\n        });\r\n        this.options = options || {\r\n            client_id: '118969089660-0qd1s1jdobecfuk4drs1k6a5vjkvc5tj.apps.googleusercontent.com',\r\n            client_secret: 'AdO4W2POd4R1SGnwbfl8kAvA',\r\n            scopes: [\"https://www.googleapis.com/auth/drive\"] // Scopes limit access for OAuth tokens.\r\n        };\r\n        this.ROOT_URL = 'https://www.googleapis.com/drive/v2/';\r\n        this.FILES = this.ROOT_URL + 'files';\r\n        this.USER_INFO = this.ROOT_URL + 'about';\r\n        this.auth = function() {\r\n            var deffered = $q.defer();\r\n            const BrowserWindow = require('electron').remote.BrowserWindow;\r\n            authWindow = new BrowserWindow({ width: 800, height: 600, show: false, 'node-integration': false });\r\n            var driveUrl = 'https://accounts.google.com/o/oauth2/v2/auth';\r\n            var authUrl = `${driveUrl}?response_type=code&client_id=${this.options.client_id}&scope=${this.options.scopes}&redirect_uri=urn:ietf:wg:oauth:2.0:oob&access_type=offline`;\r\n            authWindow.loadURL(authUrl);\r\n            authWindow.show();\r\n            authWindow.webContents.on('did-frame-finish-load', (event) => {\r\n                handleCallback(event).then(function(){\r\n                    deffered.resolve();\r\n                });\r\n            });\r\n            authWindow.on('close', () => {\r\n                this.authWindow = null;\r\n            }, false);\r\n            return deffered.promise;\r\n        }\r\n        this.authRefresh = function() {\r\n            var deffered = $q.defer();\r\n            var driveUrl = 'https://www.googleapis.com/oauth2/v4/token';\r\n\r\n            var authUrl = `${driveUrl}?grant_type=refresh_token&client_id=${me.options.client_id}&client_secret=${me.options.client_secret}&refresh_token=${me.refreshToken}`;\r\n            \r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('POST', authUrl, true);\r\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');  \r\n           \r\n            xhr.onload = function(e) {\r\n\r\n                var responseObj = JSON.parse(this.response);\r\n                if (responseObj && responseObj.access_token) {\r\n                    me.accessToken = responseObj.access_token;                    \r\n                    deffered.resolve();\r\n\r\n                } else {\r\n                    return me.auth();                    \r\n                }\r\n            }\r\n            xhr.send(null);\r\n            return deffered.promise;\r\n        }\r\n        this.remove = function() {\r\n            storage.remove('gdrive');\r\n            storage.remove('gdrive_refresh');\r\n            var remote = require('electron').remote;\r\n            var session = remote.session;\r\n            _accessToken = null;\r\n            _refreshToken = null;\r\n            session.defaultSession.cookies.get({}, (error, cookies) => {\r\n\r\n                cookies.forEach((cookie) => {\r\n                     console.log(\"http\" + (cookie.secure ? \"s\" : \"\") + \"://\" + cookie.domain + cookie.path)\r\n                    if (cookie.domain.indexOf('google') != -1 || cookie.domain.indexOf('youtube') != -1 || cookie.domain.indexOf('doubleclick.net') != -1) {\r\n                        var url = \"http\" + (cookie.secure ? \"s\" : \"\") + \"://\" + cookie.domain + cookie.path;\r\n                        session.defaultSession.cookies.remove(url, cookie.name, () => {});\r\n                    }\r\n                })\r\n            });\r\n\r\n        }\r\n        function handleCallback(event) {\r\n            var deffered = $q.defer();\r\n            var title = event.sender.getTitle();\r\n            var raw_code = /Success code=([^&]*)/.exec(title) || null;\r\n            var code = (raw_code && raw_code.length > 1) ? raw_code[1] : null;\r\n            if (code) {\r\n                authWindow.destroy();\r\n                requestToken(code).then(function(){\r\n                    deffered.resolve();\r\n                });\r\n\r\n            }\r\n            return deffered.promise;\r\n        }\r\n\r\n        function requestToken(code) {\r\n            var deffered = $q.defer();\r\n            var driveUrl = 'https://www.googleapis.com/oauth2/v4/token';\r\n\r\n            var authUrl = `${driveUrl}?grant_type=authorization_code&client_id=${me.options.client_id}&code=${code}&client_secret=${me.options.client_secret}&redirect_uri=urn:ietf:wg:oauth:2.0:oob`;\r\n            \r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('POST', authUrl, true);\r\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');          \r\n            xhr.onload = function(e) {\r\n\r\n                var responseObj = JSON.parse(this.response);\r\n                if (responseObj && responseObj.access_token) {\r\n                    me.accessToken = responseObj.access_token;\r\n                    me.refreshToken = responseObj.refresh_token;\r\n                    deffered.resolve();\r\n\r\n                } else {\r\n                    deffered.reject();\r\n                }\r\n            }\r\n            xhr.send(null);\r\n            return deffered.promise;\r\n\r\n        }\r\n    }\r\n    return GDrive;\r\n})\r\n","angular.module('sp-app').factory('spotify', function($http, File, $q, Cloud, library, storage) {\r\n\r\n    spotify = new Spotify();\r\n    var username = \"\";\r\n\r\n    Object.defineProperty(spotify, 'access_token', {\r\n        set: function(value) {\r\n            this._access_token = value;\r\n            storage.set('spotify', value);\r\n        },\r\n        get: function() {\r\n            return this._access_token;\r\n        }\r\n    })\r\n    var spotify = {\r\n        initDrive: function() {\r\n\r\n\r\n            var musicFiles = [];\r\n            var self = this;\r\n            var deferred = $q.defer();\r\n\r\n\r\n            function fetchFiles(retry) {\r\n\r\n                $http.get(spotify.tracks, {\r\n                    headers: {\r\n                        'Authorization': 'Bearer ' + spotify.access_token\r\n                    }\r\n                }).then(function(result) {\r\n\r\n                    if ((result.data && result.data.error) && retry) {\r\n                        spotify.removeCachedAuthToken(\r\n                            spotify.auth.bind(spotify, fetchFiles.bind(this, false))\r\n                        );\r\n                    } else {\r\n\r\n                        var data = result.data.items;\r\n                        var files = data.map(function(item) {\r\n\r\n                            var file = new File(item.track);\r\n                            file.name = item.track.artists[0].name + \" - \" + item.track.name;\r\n                            return file;\r\n\r\n                        });\r\n                        musicFiles = musicFiles.concat(files);\r\n                        // var requestURl = 'https://api.vk.com/method/audio.get?uid=' + me.user_id + '&access_token=' + me.access_token;\r\n\r\n                        $http.get(spotify.user, {\r\n                            headers: {\r\n                                'Authorization': 'Bearer ' + spotify.access_token\r\n                            }\r\n                        }).success(function(acocuntInfo) {\r\n\r\n\r\n                            username = acocuntInfo.email;\r\n                            deferred.resolve({\r\n                                source: self,\r\n                                musicFiles: musicFiles,\r\n                                name: \"Spotify\"\r\n                            });\r\n                        }).error(function(e) {\r\n                            console.log(e);\r\n                        })\r\n                    }\r\n                }, function(error) {\r\n                    if (retry) {\r\n                        spotify.removeCachedAuthToken(\r\n                            spotify.auth.bind(spotify, fetchFiles.bind(this, false))\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n            fetchFiles(true);\r\n            return deferred.promise;\r\n        },\r\n        remove: function() {\r\n            if (spotify) {\r\n                spotify.removeCachedAuthToken();\r\n                spotify.access_token = null;\r\n            }\r\n            storage.remove('spotify');\r\n\r\n        },\r\n        getMetadata: function(track) {\r\n            var file = track.file;\r\n            var deffered = $q.defer();\r\n            var metadata = {};\r\n\r\n            track.metadata = metadata;\r\n            metadata.cloud = \"Spotify\";\r\n            library.addToCloud(track, username);\r\n            if (!file) {\r\n                deffered.resolve(metadata);\r\n            } else {\r\n                var audio = new Audio();\r\n                metadata.title = file.rawData.name || \"\";\r\n                // var artists = [];\r\n                // file.rawData.artists.forEach(function(a){\r\n                //     artists.push(a.name)\r\n\r\n                // })\r\n                // metadata.artist = artists.join('/');                \r\n                metadata.duration = file.rawData.duration_ms / 1000 || \"\";\r\n                track.src = file.rawData.href;\r\n                deffered.resolve(metadata);\r\n            }\r\n            return deffered.promise;\r\n        }\r\n    }\r\n    storage.get('spotify').then(function(result) {\r\n        if (result) {\r\n            spotify.access_token = result;\r\n            spotify.initDrive().then(function(musicStorage) {\r\n                library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n            });\r\n        }\r\n    });\r\n    return spotify;\r\n})\r\n","angular.module('sp-app').factory('vkontakte', function($http, File, $q, loader, Cloud, library, storage, Vkontakte) {\r\n\r\n    vkClient = new Vkontakte();\r\n    var username = \"\";\r\n\r\n    Object.defineProperty(vkClient, 'access_token', {\r\n        set: function(value) {\r\n            this._access_token = value;\r\n            storage.set('vk', value);\r\n        },\r\n        get: function() {\r\n            return this._access_token;\r\n        }\r\n    })\r\n    var vk = {\r\n        initDrive: function() {\r\n\r\n\r\n            var musicFiles = [];\r\n            var self = this;\r\n            var deferred = $q.defer();\r\n\r\n            function getFiles(secondTime) {\r\n                //\"audio.get\" + '?uid=' + this.user_id + '&access_token=' + this.access_token;\r\n                $http.get(vkClient.FILES + '?uid=' + vkClient.userId + '&access_token=' + vkClient.accessToken).then(function(result) {\r\n\r\n                    if (result && result.data.error && !secondTime) {\r\n                        vkClient.auth().then(function() {\r\n                            getFiles(true);\r\n                        });\r\n                        return;\r\n                    }\r\n                    var data = result.data.response;\r\n                    var files = data.map(function(item) {\r\n                        var file = new File(item);\r\n                        file.id = file.rawData.aid;\r\n                        file.name = item.artist + \" - \" + item.title;\r\n                        return file;\r\n\r\n                    });\r\n                    musicFiles = musicFiles.concat(files);\r\n                    $http.get(vkClient.USER + '?uid=' + vkClient.userId + '&access_token=' + vkClient.accessToken).then(function(acocuntInfo) {\r\n\r\n                        var response = acocuntInfo.data.response[0];\r\n                        username = response.first_name + \" \" + response.last_name;\r\n\r\n                        deferred.resolve({\r\n                            source: self,\r\n                            musicFiles: musicFiles,\r\n                            name: \"Vkontakte\"\r\n                        });\r\n                    })\r\n                }, function(error) {\r\n                    console.log(error);\r\n\r\n                })\r\n            }            \r\n            getFiles();\r\n            return deferred.promise;\r\n        },\r\n        search: function(query) {\r\n                var deferred = $q.defer();\r\n                var self = this;\r\n                $http.get(vkClient.SEARCH + '?q='+query+'&auto_complete=1&sort=2&count=5&access_token=' + vkClient.accessToken+'&v=5.53').then(function(result) {\r\n\r\n                    // if (result && result.data.error && !secondTime) {\r\n                    //     vkClient.auth().then(function() {\r\n                    //         getFiles(true);\r\n                    //     });\r\n                    //     return;\r\n                    // }\r\n                    var data = result.data.response.items;\r\n                    var files = data.map(function(item) {\r\n                        var file = new File(item);\r\n                        file.id = file.rawData.aid;\r\n                        file.name = item.artist + \" - \" + item.title;\r\n                        return file;\r\n\r\n                    });\r\n                    \r\n\r\n                    // musicFiles = musicFiles.concat(files);\r\n                    // $http.get(vkClient.USER + '?uid=' + vkClient.userId + '&access_token=' + vkClient.accessToken).then(function(acocuntInfo) {\r\n\r\n                    //     var response = acocuntInfo.data.response[0];\r\n                    //     username = response.first_name + \" \" + response.last_name;\r\n\r\n                    deferred.resolve({\r\n                        source: self,\r\n                        musicFiles: files,\r\n                        name: \"Vkontakte\"\r\n                    });\r\n                    // })\r\n                }, function(error) {\r\n                    console.log(error);\r\n\r\n                })\r\n                return deferred.promise;\r\n                       \r\n        },\r\n        remove: function() {\r\n            if (vkClient) {\r\n                vkClient.remove();\r\n            }          \r\n\r\n        },\r\n        getMetadata: function(track, noCloud) {\r\n            var file = track.file;\r\n            var deffered = $q.defer();\r\n            var metadata = {};\r\n\r\n            track.metadata = metadata;\r\n            metadata.cloud = \"Vkontakte\";\r\n            if(!noCloud) {\r\n                library.addToCloud(track, username);\r\n            }\r\n            if (!file) {\r\n                deffered.resolve(metadata);\r\n            } else {\r\n                var audio = new Audio();\r\n                metadata.title = file.rawData.title || \"\";\r\n                metadata.artist = file.rawData.artist || \"\";\r\n                metadata.duration = file.rawData.duration || \"\";\r\n                track.src = file.rawData.url;\r\n                deffered.resolve(metadata);\r\n            }\r\n            return deffered.promise;\r\n        }\r\n    }\r\n    storage.get('vk').then(function(accessToken) {\r\n        if (accessToken) {\r\n            vkClient.accessToken = accessToken;\r\n            storage.get('vk-userid').then(function(userId) {\r\n                vkClient.userId = userId;\r\n                vk.initDrive().then(function(musicStorage) {\r\n                    library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n                });\r\n            })\r\n        }\r\n    });\r\n    return vk;\r\n})\r\n","angular.module(\"sp-app\").provider(\"Vkontakte\", function () {\r\n    \r\n\r\n    this.$get = function (platform, VkontakteChrome, VkontakteDesktop) {\r\n\r\n        if(platform.getType() == platform.types.chrome) {\r\n            return VkontakteChrome;\r\n        } else if(platform.getType() == platform.types.desktop) {\r\n            return VkontakteDesktop;\r\n        } \r\n      \r\n    }\r\n\r\n\r\n})","angular.module('sp-app').factory('VkontakteChrome', function($q, storage) {\r\n    function Vkontakte(options) {\r\n        var authWindow = null;\r\n        var me = this;\r\n        var _accessToken = null;\r\n        var _userId = null;\r\n        Object.defineProperty(this, 'accessToken', {\r\n            set: function(value) {\r\n                storage.set('vk', value);\r\n                _accessToken = value;\r\n            },\r\n            get: function() {\r\n                return _accessToken;\r\n            }\r\n        });\r\n        Object.defineProperty(this, 'userId', {\r\n            set: function(value) {\r\n                storage.set('vk-userid', value);\r\n                _userId = value;\r\n            },\r\n            get: function() {\r\n                return _userId;\r\n            }\r\n        });\r\n        this.options = options || {\r\n            app_id: '5516428',\r\n            permissions: \"audio,offline\" // Scopes limit access for OAuth tokens.\r\n        };\r\n        this.ROOT_URL = 'https://api.vk.com/method/';\r\n        this.FILES = this.ROOT_URL + \"audio.get\";\r\n        this.USER = this.ROOT_URL + \"users.get\";\r\n        this.SEARCH = this.ROOT_URL + \"audio.search\";\r\n        this.auth = function() {\r\n\r\n            var deffered = $q.defer();\r\n            var redirectUrl = chrome.identity.getRedirectURL('salmonplayer');\r\n            var authUrlRppt = 'https://oauth.vk.com/authorize';\r\n            var authUrl = `${authUrlRppt}?response_type=token&v=5.52&display=page&client_id=${this.options.app_id}&scope=${this.options.permissions}&redirect_uri=${redirectUrl}`;\r\n\r\n            var config = {\r\n                url: authUrl,\r\n                interactive: true\r\n            }\r\n            chrome.identity.launchWebAuthFlow(config, function(responseUrl) {\r\n                if (responseUrl) {\r\n\r\n\r\n                    var raw_code = /access_token=([^&]*)/.exec(responseUrl) || null;\r\n                    var raw_user_id = /user_id=([^&]*)/.exec(responseUrl) || null;\r\n                    var access_token = (raw_code && raw_code.length > 1) ? raw_code[1] : null;\r\n                    var user_id = (raw_user_id && raw_user_id.length > 1) ? raw_user_id[1] : null;\r\n                    if (access_token) {\r\n                        me.accessToken = access_token;\r\n                        me.userId = user_id;\r\n                        deffered.resolve();\r\n                    }\r\n\r\n\r\n\r\n                }\r\n            })\r\n            return deffered.promise;\r\n        }\r\n        this.remove = function() {\r\n            storage.remove('vk');\r\n            storage.remove('vk-userid');\r\n            // var redirectUrl = chrome.identity.getRedirectURL('salmonplayer');\r\n            // var url = `https://www.google.com/accounts/Logout?continue=https://appengine.google.com/_ah/logout?continue=` + redirectUrl;\r\n            // var config = {\r\n            //     url: url,\r\n            //     interactive: true\r\n            // }\r\n            chrome.identity.removeCachedAuthToken({\r\n                token: _accessToken\r\n            });\r\n\r\n            // chrome.identity.launchWebAuthFlow(config, function(responseUrl) {\r\n            //     deffered.resolve();\r\n            // });\r\n            _accessToken = null;\r\n            _userId = null;\r\n\r\n        }\r\n    }\r\n    return Vkontakte;\r\n})\r\n","angular.module('sp-app').factory('VkontakteDesktop', function($q, storage) {\r\n    function Vkontakte(options) {\r\n        var authWindow = null;\r\n        var me = this;\r\n        var _accessToken = null;\r\n        var _userId = null;\r\n        Object.defineProperty(this, 'accessToken', {\r\n            set: function(value) {\r\n                storage.set('vk', value);\r\n                _accessToken = value;\r\n            },\r\n            get: function() {\r\n                return _accessToken;\r\n            }\r\n        });\r\n        Object.defineProperty(this, 'userId', {\r\n            set: function(value) {\r\n                storage.set('vk-userid', value);\r\n                _userId = value;\r\n            },\r\n            get: function() {\r\n                return _userId;\r\n            }\r\n        });\r\n        this.options = options || {\r\n            app_id: '5516428',\r\n            permissions: \"audio,offline\" // Scopes limit access for OAuth tokens.\r\n        };\r\n        this.ROOT_URL = 'https://api.vk.com/method/';\r\n        this.FILES = this.ROOT_URL + \"audio.get\";\r\n        this.USER = this.ROOT_URL + \"users.get\";\r\n        this.SEARCH = this.ROOT_URL + \"audio.search\";\r\n        this.auth = function() {\r\n            var deffered = $q.defer();\r\n            const BrowserWindow = require('electron').remote.BrowserWindow;\r\n            authWindow = new BrowserWindow({ width: 800, height: 600, show: false, 'node-integration': false });\r\n            var authUrlRppt = 'https://oauth.vk.com/authorize';\r\n            var authUrl = `${authUrlRppt}?response_type=token&v=5.52&display=popup&client_id=${this.options.app_id}&scope=${this.options.permissions}&redirect_uri=https://oauth.vk.com/blank.html`;\r\n\r\n\r\n            authWindow.loadURL(authUrl);\r\n\r\n            authWindow.show();\r\n\r\n            authWindow.webContents.on('did-frame-finish-load', (event) => {\r\n\r\n                handleCallback(event).then(function() {\r\n                    deffered.resolve();\r\n                });\r\n            });\r\n            authWindow.on('close', () => {\r\n                this.authWindow = null;\r\n            }, false);\r\n            return deffered.promise;\r\n        }\r\n\r\n        this.remove = function() {\r\n            storage.remove('vk');\r\n            storage.remove('vk-userid');\r\n            _accessToken = null;\r\n            _userId = null;\r\n            var remote = require('electron').remote;\r\n            var session = remote.session;\r\n            session.defaultSession.cookies.get({}, (error, cookies) => {\r\n\r\n                cookies.forEach((cookie) => {\r\n\r\n                    if (cookie.domain.indexOf('vk.com') != -1) {\r\n                        var url = \"http\" + (cookie.secure ? \"s\" : \"\") + \"://\" + cookie.domain + cookie.path;\r\n                        session.defaultSession.cookies.remove(url, cookie.name, () => {});\r\n                    }\r\n                })\r\n            });\r\n        }\r\n\r\n        function handleCallback(event) {\r\n            var deffered = $q.defer();\r\n            var title = event.sender.getURL();\r\n            var raw_code = /access_token=([^&]*)/.exec(title) || null;\r\n            var raw_user_id = /user_id=([^&]*)/.exec(title) || null;\r\n            var access_token = (raw_code && raw_code.length > 1) ? raw_code[1] : null;\r\n            var user_id = (raw_user_id && raw_user_id.length > 1) ? raw_user_id[1] : null;\r\n            if (access_token) {\r\n                authWindow.destroy();\r\n                me.accessToken = access_token;\r\n                me.userId = user_id;\r\n                deffered.resolve();\r\n\r\n            }\r\n            return deffered.promise;\r\n        }\r\n\r\n    }\r\n    return Vkontakte;\r\n})\r\n","angular.module(\"sp-app\").factory(\"platform\", function($http) {\r\n    const ROOT_URL = \"http://www.salmonplayer.com/\";//localhost:41449 \r\n    var types = {\r\n        chrome: 'chrome',\r\n        desktop: 'desktop',\r\n        web: 'web'\r\n    }\r\n    var type = null;\r\n    if (window.chrome && window.chrome.app.window) {\r\n        type = types.chrome;\r\n    } else if (window.process && window.process.type) {\r\n        type = types.desktop;\r\n    } else {\r\n        type = types.web;\r\n    }\r\n\r\n    return {\r\n        getType: function() {\r\n            return type;\r\n        },\r\n        types: types,\r\n        getAppVersion: function() {\r\n            if(type == types.chrome) {\r\n                return chrome.runtime.getManifest().version;\r\n            } else if(type == types.desktop) {\r\n                // var file = ${__dirname}/index.html\r\n                var pjson = require('./manifest.json');\r\n                return pjson.version;\r\n            } else {\r\n                return \"\";\r\n            }\r\n        },\r\n        updateUid : function(uid) {\r\n             var issue = JSON.stringify({ Email: \"\", Uid: uid, Platform:  type});\r\n             $http.post(ROOT_URL+ \"api/ActiveUsersApi\", issue).then(function(){\r\n                 console.log(\"uid is updated\");\r\n             })\r\n           \r\n        },\r\n        isSupportedMediaFormat: function(extension) {\r\n            return extension === 'mp3' || extension === 'wav' || extension === 'ogg' || extension=='m4a' || extension==\"aac\";\r\n        },\r\n        rootURL: ROOT_URL\r\n    }\r\n})\r\n","angular.module('sp-app').factory('player', function($q, platform, fileSystem) {\r\n    var player = new Audio();\r\n    var lGain, mGain, hGain;\r\n    // connectGain();\r\n    var repeatModes = {\r\n        repeatOne: 0,\r\n        repeatAll: 1,\r\n        noRepeat: 2\r\n    };\r\n\r\n    function percentToSeconds(percent) {\r\n        var time = player.duration;\r\n        var newPos = (time * percent) / 100;\r\n        return newPos;\r\n    }\r\n\r\n    function connectGain() {\r\n        var context = new AudioContext();\r\n\r\n        var sourceNode = context.createMediaElementSource(player);\r\n\r\n        // EQ Properties\r\n        //\r\n        var gainDb = -40.0;\r\n        var bandSplit = [360, 3600];\r\n\r\n        var hBand = context.createBiquadFilter();\r\n        hBand.type = \"lowshelf\";\r\n        hBand.frequency.value = bandSplit[0];\r\n        hBand.gain.value = gainDb;\r\n\r\n        var hInvert = context.createGain();\r\n        hInvert.gain.value = -1.0;\r\n\r\n        var mBand = context.createGain();\r\n\r\n        var lBand = context.createBiquadFilter();\r\n        lBand.type = \"highshelf\";\r\n        lBand.frequency.value = bandSplit[1];\r\n        lBand.gain.value = gainDb;\r\n\r\n        var lInvert = context.createGain();\r\n        lInvert.gain.value = -1.0;\r\n\r\n        sourceNode.connect(lBand);\r\n        sourceNode.connect(mBand);\r\n        sourceNode.connect(hBand);\r\n\r\n        hBand.connect(hInvert);\r\n        lBand.connect(lInvert);\r\n\r\n        hInvert.connect(mBand);\r\n        lInvert.connect(mBand);\r\n\r\n        lGain = context.createGain();\r\n        mGain = context.createGain();\r\n        hGain = context.createGain();\r\n\r\n        lBand.connect(lGain);\r\n        mBand.connect(mGain);\r\n        hBand.connect(hGain);\r\n\r\n        sum = context.createGain();\r\n        lGain.connect(sum);\r\n        mGain.connect(sum);\r\n        hGain.connect(sum);\r\n\r\n        sum.connect(context.destination);\r\n\r\n    }\r\n\r\n    var playerObj = {\r\n        load: function(track) {\r\n            player.src = track.src;\r\n        },\r\n        unload: function() {\r\n            player.src = \"\";\r\n        },\r\n        stop: function() {\r\n            this.pause();\r\n            this.unload();\r\n        },\r\n        play: function() {\r\n\r\n\r\n\r\n                player.play();\r\n            \r\n\r\n            \r\n\r\n        },\r\n        obtainDuration: function(track) {\r\n\r\n            var audio = new Audio();\r\n            \r\n            return $q(function(resolve, reject) {\r\n\r\n                var src = fileSystem.obtainURL(track.file);\r\n\r\n                audio.src = src;\r\n                audio.addEventListener('loadedmetadata', function() {\r\n\r\n                    if (audio.duration) {\r\n                        resolve(audio.duration);\r\n                    } else {\r\n                        reject(audio.duration);\r\n                    }\r\n                    audio = null;\r\n                    fileSystem.removeURL(src);\r\n\r\n                });\r\n            })\r\n        },\r\n        pause: function() {\r\n            player.pause();\r\n        },\r\n        isPlaying: function() {\r\n            return !player.paused;\r\n        },\r\n        setVolume: function(volume) {\r\n            player.volume = volume / 100;\r\n        },\r\n        setCurrentTime: function(currentTimePrecent) {\r\n            player.currentTime = percentToSeconds(currentTimePrecent);\r\n        },\r\n        getDuration: function() {\r\n            return player.duration;\r\n        },\r\n        getCurrentTime: function(reverse) {\r\n            if (!reverse) {\r\n                return player.currentTime;\r\n            } else {\r\n                return this.getDuration() - this.getCurrentTime();\r\n            }\r\n        },\r\n        getVolume: function() {\r\n            return Math.round(player.volume * 100);\r\n        },\r\n        onTimeUpdate: function(callback) {\r\n            player.addEventListener('timeupdate', function() {\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            });\r\n        },\r\n        volumeOut: function(callback) {\r\n            if(this.isPlaying()) {\r\n             var currVolume = this.getVolume();\r\n                var i = currVolume;\r\n                var fadeOutInterval = setInterval(function() {\r\n                    if (i >= 0) {\r\n                        this.setVolume(i);\r\n                    } else {\r\n                        this.setVolume(currVolume);\r\n                        clearInterval(fadeOutInterval);\r\n                        callback();\r\n                    }\r\n                    i-=2;\r\n                }.bind(this), 1);\r\n            } else {\r\n                callback();\r\n            }\r\n        },\r\n        onEnd: function(callback) {\r\n            player.addEventListener('ended', function() {\r\n                if (callback)\r\n                    callback();\r\n            });\r\n        }\r\n    }\r\n    Object.defineProperty(playerObj, 'repeatModes', {\r\n        get: function() {\r\n            return repeatModes;\r\n        }\r\n    })\r\n    return playerObj;\r\n\r\n})\r\n","angular.module('sp-app').factory(\"searchService\", function() {\r\n    return {\r\n        search: function(collection, keyword, prop) {\r\n            keyword = keyword.toLowerCase();\r\n            return collection.filter(function(item) {\r\n                if (item[prop]) {\r\n                    propValue = item[prop].trim().toLowerCase();\r\n                    if (propValue == keyword) {\r\n                        return item;\r\n                    } else {\r\n\r\n                        var parts = propValue.split(\" \");\r\n                        for (var i = 0; i < parts.length; i++) {\r\n                            if (_.startsWith(parts[i], keyword)) {\r\n                                return item;\r\n                                break;\r\n                            }\r\n                        }\r\n                        var splittedKey = keyword.split(\" \");\r\n                        if(splittedKey.length > 1) {\r\n                        \tif(propValue.indexOf(keyword) != -1) {\r\n                        \t\treturn item;\r\n                        \t}\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n})\r\n","angular.module(\"sp-app\").provider(\"storage\", function () {\r\n    \r\n\r\n    this.$get = function (platform, chromeStorage, html5Storage) {\r\n\r\n        if(platform.getType() == platform.types.chrome) {\r\n            return chromeStorage;\r\n        } else if(platform.getType() == platform.types.desktop) {\r\n            return html5Storage;\r\n        } else if(platform.getType() == platform.types.web) {\r\n            return html5Storage;\r\n        }  \r\n      \r\n    }\r\n\r\n\r\n})","angular.module('sp-app').factory('toast', function() {\r\n    const _DURATION = 2500;\r\n    var _toast_container = null;\r\n    var _timeoutId;\r\n\r\n    function removeToast() {\r\n         if(!_toast_container) {\r\n            return;\r\n         }\r\n         _toast_container.parentElement.removeChild(_toast_container);\r\n         _toast_container = null;\r\n    }\r\n    return {\r\n        show: function(options) {\r\n            if(_toast_container) {\r\n                _toast_container.parentElement.removeChild(_toast_container);\r\n            }\r\n            clearTimeout(_timeoutId);\r\n            _toast_container = document.createElement('div');\r\n            _toast_container.classList.add('toast_container');\r\n            _toast_container.classList.add('toast_fadein');\r\n            \r\n\r\n            var toast = document.createElement('div');\r\n            toast.classList.add('toast');      \r\n            if(options.content) {\r\n                toast.innerHTML = options.content;\r\n            }\r\n            _toast_container.appendChild(toast);\r\n\r\n            document.body.appendChild(_toast_container);\r\n            \r\n            if(options.duration == null || options.duration == undefined || isNaN(optios.duration)) {\r\n                options.duration = _DURATION;\r\n            }\r\n            _timeoutId = setTimeout(this.hide, options.duration);\r\n\r\n        },\r\n        hide: function() {\r\n            if(!_toast_container) {\r\n                return;\r\n            }\r\n            clearTimeout(_timeoutId);\r\n            \r\n          \r\n            _toast_container.addEventListener('webkitAnimationEnd', removeToast);\r\n            _toast_container.addEventListener('animationEnd', removeToast);\r\n            _toast_container.addEventListener('msAnimationEnd', removeToast);\r\n            _toast_container.addEventListener('oAnimationEnd', removeToast);\r\n\r\n            _toast_container.classList.add('toast_fadeout');\r\n        }   \r\n    }\r\n})","angular.module('sp-app').factory('uidService', function() {\r\n        return {\r\n            generateUid: function(index, random) {\r\n                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n                    var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);\r\n                    var s = v.toString(16);\r\n                    if (random && ((Math.random() * 2 | 0 ) === 1)) {\r\n                        s = s.toUpperCase();\r\n                    }\r\n                    return s;\r\n                });\r\n            }\r\n        };\r\n    }\r\n);","angular.module(\"sp-app\").factory(\"updateService\", function ($http, platform, $q, fileSystem) {\r\n    const ROOT_URL = platform.rootURL;\r\n    return {\r\n        checkForUpdates: function () {\r\n            var deferred = $q.defer();\r\n            var appVersion = platform.getAppVersion();\r\n            $http.get(`${ROOT_URL}api/UpdateApi?version=${appVersion}`).then(function (result) {\r\n                if (result && result.data) {\r\n                    deferred.resolve(result.data);\r\n                }\r\n            }, function () {\r\n                deferred.reject(\"Update checking problem\");\r\n            })\r\n            return deferred.promise;\r\n        },\r\n        checkIfExists: function (filename) {\r\n            var app = require('electron').remote.app;\r\n            var appDataPath = app.getPath(\"temp\");\r\n            var packagePath = appDataPath + \"/salmonplayer-update/\" + filename + \".exe\";\r\n            if(fileSystem.pathExists(packagePath)) {\r\n                return packagePath;\r\n            }\r\n\r\n        },\r\n        saveExecutable: function (filename, data) {\r\n            var deferred = $q.defer();\r\n            var app = require('electron').remote.app;\r\n            var appDataPath = app.getPath(\"temp\");\r\n            var fs = require('fs');\r\n            var rootPath = appDataPath + \"/salmonplayer-update/\";\r\n            if (!fileSystem.pathExists(rootPath)) {\r\n                fs.mkdirSync(rootPath);\r\n            }\r\n            var updatePackagePath = rootPath+filename;\r\n            fs.writeFile(rootPath+filename, data, \"binary\", function (err) {\r\n                if (err) {\r\n                    deferred.reject();\r\n                } else {\r\n                    deferred.resolve(updatePackagePath);\r\n                }\r\n\r\n                \r\n            });            \r\n            return deferred.promise;\r\n        },\r\n        clearExistingPackage: function() {\r\n            var deferred = $q.defer();\r\n            var app = require('electron').remote.app;\r\n            var appDataPath = app.getPath(\"temp\");\r\n            var fs = require('fs');\r\n            var rootPath = appDataPath + \"/salmonplayer-update/\";\r\n            if (fileSystem.pathExists(rootPath)) {\r\n                fs.readdir(rootPath, function (error, result) {\r\n                    if (error) {\r\n                        deferred.reject();\r\n                        \r\n                    } else {\r\n                        result.forEach(function (item) {\r\n                            var stats = fs.statSync(rootPath + item);\r\n                            if (stats.isFile()) {\r\n                                fs.unlink(rootPath + item, (err) => {\r\n                                    if (err) {\r\n                                        deferred.reject();\r\n                                    } else {\r\n                                        deferred.resolve();\r\n                                    }                                    \r\n                                });\r\n                            }\r\n                        })\r\n                    }\r\n                }) \r\n            }\r\n            return deferred.promise\r\n        }\r\n    }\r\n})","angular.module(\"sp-app\").provider(\"windowManager\", function () {\r\n    \r\n\r\n    this.$get = function (platform, chromeWindowManager, desktopWindowManager) {\r\n\r\n        if(platform.getType() == platform.types.chrome) {\r\n            return chromeWindowManager;\r\n        } else if(platform.getType() == platform.types.desktop) {\r\n            return desktopWindowManager;\r\n        } \r\n      \r\n    }\r\n\r\n\r\n})","angular.module('sp-app').factory('effects', function() {\r\n    function getPosition(element) {\r\n        var xPosition = 0;\r\n        var yPosition = 0;\r\n        \r\n\r\n        // while (element) {\r\n        //     xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);\r\n        //     yPosition += (element.offsetTop - element.scrollTop + element.clientTop);\r\n        //     element = element.offsetParent;\r\n        // }\r\n        var metrics = element.getBoundingClientRect();\r\n        return {\r\n            x: metrics.left,\r\n            y: metrics.top\r\n        };\r\n    }\r\n\r\n\r\n    function inkFill(element, x, y) {\r\n       \r\n        var parentPosition = getPosition(element);\r\n        var svg = element.querySelector(\".material_ink\");\r\n        var ink = svg.getElementsByTagName(\"circle\")[0];        \r\n       \r\n        var xPosition = x - parentPosition.x;\r\n        var yPosition = y - parentPosition.y;\r\n       // var w = element.offsetWidth;\r\n       // var h = element.offsetHeight;\r\n       // var radius = Math.sqrt(Math.pow(w, 2) + Math.pow(h, 2)); \r\n        ink.classList.remove('clicked');\r\n        var tid = setTimeout(function() {\r\n            ink.style[\"cx\"] = xPosition;\r\n            ink.style[\"cy\"] = yPosition;\r\n           // ink.style[\"r\"] = radius ;\r\n            ink.classList.add('clicked');\r\n            clearTimeout(tid);\r\n        });\r\n    }\r\n    return {\r\n        ripple: function(element, clientX, clientY) {\r\n\r\n            inkFill(element, clientX, clientY);\r\n\r\n        }\r\n    }\r\n}).directive('rippleEffect', function(effects){\r\n    return {\r\n        link: function(scope, elem, attrs) {\r\n           \r\n            elem[0].addEventListener('mousedown', function(e){\r\n                 effects.ripple(elem[0], e.clientX, e.clientY);\r\n            })\r\n           \r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').filter('duration', function(){\r\n\tfunction toHHMMSS(value) {\r\n        var sec_num = parseInt(value, 10); // don't forget the second param\r\n        var hours   = Math.floor(sec_num / 3600);\r\n        var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n        var seconds = sec_num - (hours * 3600) - (minutes * 60);\r\n       \r\n        if(!Number.isInteger(hours) || !Number.isInteger(minutes) || !Number.isInteger(seconds)){\r\n            return \"\";\r\n        }\r\n        if (hours   < 10 ) {hours   = \"0\"+hours;}\r\n        if (minutes < 10) {minutes = \"0\"+minutes;}\r\n        if (seconds < 10) { seconds = \"0\" + seconds; }\r\n        if(hours!='00')\r\n            var time = hours + ':' + minutes + ':' + seconds;\r\n        else {\r\n            time = minutes + ':' + seconds;\r\n        }\r\n        return time;\r\n    }\r\n\treturn function(input){\r\n\t\tif(_.isNumber(input)) {\r\n\t\t\treturn toHHMMSS(input);\r\n\t\t}\r\n\t}\r\n})","angular.module('sp-app').controller(\"albumCtrl\", function($scope, library, dialogManager){\r\n\t$scope.album = library.getOpenAlbum();\r\n  \r\n    $scope.getArtStyles = function() {\r\n        \r\n        var styles = {};\r\n        if ($scope.album) {\r\n            styles = {\r\n                'background-image': 'url(' + $scope.album.albumArtPath + ')'\r\n            };\r\n        } \r\n        \r\n        return styles;\r\n    }\r\n\r\n    $scope.itemApi = {\r\n        openListContextMenu: function(event, track) {\r\n            var scope = $scope.$new();\r\n            scope.selectedTrack = track;\r\n\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/track_list/listContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        goToAlbum: function(track) {\r\n            library.setOpenAlbum(track.album);\r\n            $scope.navigator.openAlbum = true;\r\n        },\r\n        orderBy: 'number',\r\n        name: 'album'\r\n    }\r\n    $scope.playTrack = function(track) {\r\n\r\n        library.playTrack(track);\r\n        if (library.getQueue() != $scope.album.tracks) {\r\n            library.setQueue($scope.album.tracks);\r\n        }\r\n    }\r\n})","angular.module('sp-app').controller('albumsCtrl', function($scope, library, dialogManager, $filter){\r\n\t$scope.albums = library.getAlbums();\r\n    $scope.itemApi = {\r\n    \topen: function(album){\r\n    \t\t\r\n    \t\tlibrary.setOpenAlbum(album);\r\n    \t\t$scope.navigator.openAlbum = true;\r\n    \t},\r\n\r\n        openListContextMenu: function(event, album) {\r\n            var scope = $scope.$new();\r\n            scope.selectedItem = album;\r\n            scope.playAlbum = function() {\r\n                library.playTrack(scope.selectedItem.tracks[0]);\r\n                if (library.getQueue() != scope.selectedItem.tracks) {\r\n                    library.setQueue(scope.selectedItem.tracks);\r\n                }\r\n            },\r\n            scope.addToQueue = function () {\r\n                scope.selectedItem.tracks.forEach(function(t) {\r\n                    library.addToQueue(t);\r\n                })\r\n            }\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/grid_view/gridContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        filter: function() {\r\n            var keyword = \"\";\r\n            var items = undefined;\r\n            if($scope.search && $scope.search.albumsSearch) {\r\n                keyword = $scope.search.albumsSearch.toLowerCase();\r\n                //$filter('filter')(array, expression, comparator, anyPropertyKey)\r\n\r\n                items = $scope.albums.filter(function(item){\r\n                    return item.name.toLowerCase().indexOf(keyword) != -1 || item.artist.name.toLowerCase().indexOf(keyword) != -1;\r\n                })\r\n                \r\n            } \r\n            return items;\r\n        },\r\n        name: 'albums'\r\n    }\r\n   \r\n})","angular.module('sp-app').controller('appCtrl', function($scope, $timeout, $rootScope, player, uidService, dialogManager, library, storage, configFactory, platform, localStorage, updateService) {\r\n    var APP_PREV_HEIGHT = 650;\r\n    var APP_PREV_WIDTH = 450;\r\n    setTimeout(function() {\r\n        storage.get(\"uid\").then(function(uid) {\r\n            var id = \"\";\r\n            if (!uid) {\r\n\r\n                uid = uidService.generateUid();\r\n                id = uid;\r\n\r\n            } else {\r\n                id = uid.uid;\r\n            }\r\n            storage.set(\"uid\", { \"uid\": id });\r\n            platform.updateUid(id);\r\n        })\r\n    }, 2000)\r\n\r\n    $rootScope.checkForUpdates = function() {\r\n        if (platform.getType() == platform.types.desktop) {\r\n            $timeout(function() {\r\n                updateService.checkForUpdates().then(function(appVersion) {\r\n                    if (appVersion) {\r\n                        var existingPath = updateService.checkIfExists(appVersion.FileName);\r\n                        if (existingPath) {\r\n                            showUpdateDialog(appVersion, existingPath);\r\n                            return;\r\n                        }\r\n                        var fs = require('fs');\r\n                        var r = new XMLHttpRequest();\r\n                        r.open(\"GET\", platform.rootURL + 'File/Update?currentVersion=' + platform.getAppVersion(), true);\r\n                        r.responseType = 'arraybuffer';\r\n                        r.onload = function(e) {\r\n\r\n                            var data = new Buffer(r.response);\r\n                            var filename = r.responseURL.split(\"/\").pop();\r\n                            filename = filename.split(\"?\").shift();\r\n                            updateService.saveExecutable(filename, data).then(function(updatePackagePath) {\r\n                                showUpdateDialog(appVersion, updatePackagePath);\r\n                            });\r\n                        }\r\n                        r.send();\r\n\r\n                    } else {\r\n                        updateService.clearExistingPackage();\r\n                    }\r\n                }, function() {\r\n                    updateService.clearExistingPackage();\r\n                });\r\n            }, 3000);\r\n        }\r\n    }\r\n\r\n    $rootScope.checkForUpdates();\r\n\r\n    function showUpdateDialog(appVersion, packagePath) {\r\n        var scope = $scope.$new();\r\n        scope.version = appVersion.VersionString;\r\n        scope.packagePath = packagePath;\r\n        dialogManager.openDialog({\r\n            template: \"app/views/update/updateDialog.html\",\r\n            scope: scope,\r\n            autoClose: false,\r\n            backDrop: true\r\n        });\r\n    }\r\n    $scope.isLibraryEmpty = function() {\r\n\r\n        return localStorage.getFolders().length == 0 && library.getClouds().length == 0;\r\n    }\r\n    $rootScope.$closeDialog = function() {\r\n        dialogManager.closeDialog();\r\n    }\r\n    $scope.globalKeyDown = function(event) {\r\n        if (event.which == 9 || event.code == 'Tab') {\r\n            event.preventDefault();\r\n        }\r\n        if (event.keyIdentifier == \"MediaPlayPause\") {\r\n            $rootScope.$broadcast('play-pause', event);\r\n            event.preventDefault();\r\n        }\r\n        if (event.target.tagName !== 'input' && event.target.tagName !== 'textarea') {\r\n            $rootScope.$broadcast('global-key-down', event);\r\n        }\r\n    }\r\n    $scope.globalKeyUp = function(event) {\r\n        if (event.target.tagName !== 'input' && event.target.tagName !== 'textarea') {\r\n            $rootScope.$broadcast('global-key-up', event);\r\n        }\r\n    }\r\n    $scope.globalClick = function(event) {\r\n\r\n        $rootScope.$broadcast('global-mouse-click', event);\r\n\r\n    }\r\n    $scope.closeApp = function() {\r\n        if (platform.getType() == platform.types.chrome) {\r\n            chrome.app.window.current().close();\r\n        } else {\r\n            // const remote = require('electron').remote;\r\n            // var currentWindow = remote.getCurrentWindow();\r\n            // currentWindow.close();\r\n            const app = require('electron').remote.app;\r\n            app.quit();\r\n        }\r\n    };\r\n    $scope.navigator = {\r\n        openMainMenu: false,\r\n        openMediaSource: false,\r\n        openSettings: false,\r\n        currentView: 'allsongs',\r\n        queueOpen: false,\r\n        openAlbum: false,\r\n        openArtist: false,\r\n        openPlaylist: false,\r\n        openCloud: false,\r\n    };\r\n\r\n\r\n    $scope.initialized = false;\r\n    configFactory.loadConfiguration().then(function() {\r\n        $scope.initialized = true;\r\n        $scope.settings = configFactory.configuration.settings;\r\n        $scope.playback = configFactory.configuration.playback;\r\n    });\r\n    $scope.$watch(function() {\r\n        return configFactory.configuration;\r\n    }, function(newValue, oldValue) {\r\n        if (newValue != oldValue) {\r\n            $scope.$broadcast('volume-changed');\r\n            configFactory.saveConfiguration();\r\n        }\r\n\r\n    }, true);\r\n\r\n    $scope.restoreApp = function() {\r\n\r\n    };\r\n\r\n\r\n    $scope.toggleMainMenu = function() {\r\n        $scope.navigator.openMainMenu = !$scope.navigator.openMainMenu;\r\n    }\r\n\r\n    $scope.closeMediaSources = function() {\r\n        $scope.navigator.openMediaSource = false;\r\n    };\r\n    $scope.closeSettings = function() {\r\n        $scope.navigator.openSettings = false;\r\n    };\r\n    $scope.isPlaying = function() {\r\n        return player.isPlaying();\r\n    }\r\n    $scope.toggleQueue = function() {\r\n\r\n        $scope.navigator.queueOpen = !$scope.navigator.queueOpen;\r\n        if ($scope.navigator.queueOpen) {\r\n            $scope.navigator.openSettings = false;\r\n            $scope.navigator.openMediaSource = false;\r\n        }\r\n    }\r\n    $scope.closeCloud = function() {\r\n        $scope.navigator.openCloud = false;\r\n    }\r\n    $scope.closeAlbumArtist = function() {\r\n        if ($scope.navigator.openAlbum) {\r\n            $scope.closeAlbum();\r\n            return;\r\n        }\r\n        $scope.closeArtist();\r\n    }\r\n    $scope.closeAlbum = function() {\r\n        $scope.navigator.openAlbum = false;\r\n    }\r\n    $scope.closePlaylist = function() {\r\n        $scope.navigator.openPlaylist = false;\r\n    }\r\n\r\n    $scope.closeArtist = function() {\r\n        $scope.navigator.openArtist = false;\r\n    }\r\n    $scope.getCurrentTrack = function() {\r\n        return library.getCurrentTrack();\r\n    }\r\n    $scope.getArtStyles = function() {\r\n        var currentTrack = library.getCurrentTrack();\r\n        var styles = {};\r\n        if (currentTrack && $scope.settings.showAlbumArt) {\r\n            styles = {\r\n                'background-image': 'url(' + library.getCurrentTrack().album.albumArtPath + ')'\r\n            };\r\n        }\r\n\r\n        return styles;\r\n    }\r\n    if (platform.getType() == platform.types.chrome) {\r\n        window.chrome.app.window.current().onBoundsChanged.addListener(function() {\r\n            $scope.$broadcast('window-resize');\r\n\r\n        });\r\n    } else if (platform.getType() == platform.types.desktop) {\r\n\r\n        const currentWindow = require('electron').remote.getCurrentWindow();\r\n        currentWindow.on('resize', function() {\r\n\r\n            $scope.$broadcast('window-resize');\r\n        })\r\n    }\r\n    $scope.minimizeApp = function() {\r\n        if (platform.getType() == platform.types.chrome) {\r\n            chrome.system.display.getInfo(function(displayInfo) {\r\n                var primary = displayInfo.filter(function(item) {\r\n                    return (item.isPrimary == true);\r\n                });\r\n                var screenInfo = primary[0];\r\n\r\n                var APP_MIN_HEIGHT = 60;\r\n                var APP_MIN_WIDTH = 390;\r\n                var bounds = chrome.app.window.current().getBounds();\r\n                APP_PREV_HEIGHT = bounds.height;\r\n                APP_PREV_WIDTH = bounds.width;\r\n\r\n                chrome.app.window.current().setBounds({\r\n                    left: screenInfo.workArea.width - APP_MIN_WIDTH,\r\n                    top: screenInfo.workArea.height - APP_MIN_HEIGHT,\r\n                    width: APP_MIN_WIDTH,\r\n                    height: APP_MIN_HEIGHT\r\n                });\r\n\r\n            });\r\n        } else if (platform.getType() == platform.types.desktop) {\r\n            const remote = require('electron').remote;\r\n            var APP_MIN_HEIGHT = 60;\r\n            var APP_MIN_WIDTH = 390;\r\n\r\n            var currentWindow = remote.getCurrentWindow();\r\n            var bounds = currentWindow.getBounds();\r\n            var screenSize = remote.screen.getPrimaryDisplay().workAreaSize;\r\n            APP_PREV_HEIGHT = bounds.height;\r\n            APP_PREV_WIDTH = bounds.width;\r\n            currentWindow.setBounds({\r\n                x: screenSize.width - APP_MIN_WIDTH,\r\n                y: screenSize.height - APP_MIN_HEIGHT,\r\n                width: APP_MIN_WIDTH,\r\n                height: APP_MIN_HEIGHT\r\n            })\r\n        }\r\n    }\r\n    $scope.restoreApp = function() {\r\n        if (platform.getType() == platform.types.chrome) {\r\n            chrome.system.display.getInfo(function(displayInfo) {\r\n                var primary = displayInfo.filter(function(item) {\r\n                    return (item.isPrimary == true);\r\n                });\r\n                var screenInfo = primary[0];\r\n                if (screenInfo.rotation == 90) {\r\n\r\n                }\r\n                //if (APP_PREV_HEIGHT <= 60) APP_PREV_HEIGHT = 650;\r\n                //if (APP_PREV_WIDTH <= 390) APP_PREV_WIDTH = 450;\r\n\r\n\r\n                chrome.app.window.current().setBounds({\r\n                    left: screenInfo.workArea.width - APP_PREV_WIDTH,\r\n                    top: screenInfo.workArea.height - APP_PREV_HEIGHT,\r\n                    width: APP_PREV_WIDTH,\r\n                    height: APP_PREV_HEIGHT\r\n                });\r\n\r\n            });\r\n        } else if (platform.getType() == platform.types.desktop) {\r\n            const remote = require('electron').remote;\r\n            var screenSize = remote.screen.getPrimaryDisplay().workAreaSize;\r\n            var currentWindow = remote.getCurrentWindow();\r\n            currentWindow.setBounds({\r\n                x: screenSize.width - APP_PREV_WIDTH,\r\n                y: screenSize.height - APP_PREV_HEIGHT,\r\n                width: APP_PREV_WIDTH,\r\n                height: APP_PREV_HEIGHT\r\n            })\r\n        }\r\n    }\r\n}).directive(\"searchbox\", function(library) {\r\n    var keyword = \"\";\r\n    var timeoutID;\r\n    var prevView = \"\";\r\n\r\n    return function($scope, $elem, $attrs) {\r\n      \r\n        $elem[0].addEventListener('keydown', function(e) {\r\n\r\n            // if ($scope.navigator.currentView !== \"search\") {\r\n            //     prevView = $scope.navigator.currentView;\r\n            // }\r\n            if (e.which === 40) {\r\n                e.preventDefault();\r\n                $elem[0].blur();\r\n                $scope.$broadcast('search-key-down');\r\n                return\r\n            }\r\n            if (e.which === 38) {\r\n                //up\r\n                return\r\n            }\r\n            if (e.which === 9) {\r\n                $elem[0].blur();\r\n                e.preventDefault();\r\n            }\r\n            // console.log($scope.navigator.currentView);\r\n            // timeoutID = setTimeout(function () {\r\n            //     clearTimeout(timeoutID);\r\n            //     var searchValue = $elem[0].value.toLowerCase().trim();\r\n            //     if (searchValue != keyword) {\r\n            //         keyword = searchValue;\r\n            //         if (keyword != \"\") {\r\n            //             $scope.navigator.currentView = \"search\"\r\n            //             library.createSuggestion($elem[0].value);\r\n\r\n            //         } else {\r\n            //             $scope.navigator.currentView = prevView\r\n            //         }\r\n            //         $scope.$apply();\r\n            //     }\r\n            // }, 10);\r\n            // debounced();\r\n\r\n\r\n\r\n        });\r\n\r\n    }\r\n})\r\n","angular.module('sp-app').controller(\"artistCtrl\", function($scope, library) {\r\n    $scope.statistics = {};\r\n    $scope.$watch(function() {\r\n        return library.getOpenArtist()\r\n    }, function() {\r\n\r\n        $scope.artist = library.getOpenArtist();\r\n        if ($scope.artist && $scope.artist.albums) {\r\n            $scope.statistics.albumsCount = 0;\r\n            $scope.statistics.tracksCount = 0;\r\n            $scope.statistics.albumsCount = $scope.artist.albums.length;\r\n            $scope.artist.albums.forEach(function(album) {\r\n                $scope.statistics.tracksCount += album.tracks.length;\r\n            })\r\n        }\r\n    })\r\n    $scope.itemApi = {\r\n        open: function(album) {\r\n            library.setOpenAlbum(album);\r\n            $scope.navigator.openAlbum = true;\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').controller('artistsCtrl', function($scope, library, dialogManager){\r\n\t$scope.artists = library.getArtists();\r\n    $scope.itemApi = {\r\n    \topen: function(artist){\r\n    \t\tlibrary.setOpenArtist(artist);\r\n    \t\t$scope.navigator.openArtist = true;\r\n    \t},\r\n        openListContextMenu: function(event, artist) {\r\n            var scope = $scope.$new();\r\n            scope.selectedItem = artist;\r\n            scope.playAlbum = function() {\r\n                var tracks = [];\r\n                artist.albums.forEach(function(album){\r\n                    album.tracks.forEach(function(track){\r\n                        tracks.push(track);\r\n                    })\r\n                })\r\n                library.playTrack(tracks[0]);\r\n                if (library.getQueue() != tracks) {\r\n                    library.setQueue(tracks);\r\n                }\r\n            }\r\n            scope.addToQueue = function () {\r\n                artist.albums.forEach(function(album){\r\n                    album.tracks.forEach(function(track){\r\n                        library.addToQueue(track);\r\n                    })\r\n                })\r\n               \r\n            }\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/grid_view/gridContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        filter: function() {\r\n            var keyword = \"\";\r\n            var items = undefined;\r\n            if($scope.search && $scope.search.artistsSearch) {\r\n                keyword = $scope.search.artistsSearch.toLowerCase();\r\n                //$filter('filter')(array, expression, comparator, anyPropertyKey)\r\n\r\n                items = $scope.artists.filter(function(item){\r\n                    return item.name.toLowerCase().indexOf(keyword) != -1;\r\n                })\r\n                \r\n            } \r\n            return items;\r\n        },\r\n        name: 'artists'\r\n    }\r\n\r\n})","angular.module(\"sp-app\").controller('cloudCtrl', function($scope, library, dialogManager, $injector, Track, Album, Artist) {\r\n    $scope.$watch(function() {\r\n        return library.getOpenCloud();\r\n    }, function() {\r\n\r\n        $scope.cloud = library.getOpenCloud();\r\n        console.log($injector.get('vkontakte'));\r\n\r\n    })\r\n    var  foundTracks = [];\r\n    var deboucned = _.debounce(function(newVal) {\r\n        foundTracks = [];\r\n        var service = $injector.get($scope.cloud.name.toLowerCase());\r\n        if (service.search) {\r\n            service.search(newVal).then(function(couldObj) {\r\n                var musicFiles = couldObj.musicFiles;\r\n                var tracks = musicFiles.map(function(musicFile) {\r\n                    var track = new Track(musicFile);\r\n                    couldObj.source.getMetadata(track, true).then(function(metadata) {\r\n                        \r\n                        track.duration = metadata.duration;\r\n                        track.number = metadata.track;\r\n                        track.title = metadata.title || track.title;\r\n                        var artistName = metadata.artist || 'Unknown Artist';\r\n\r\n                        var artist = new Artist(artistName);\r\n\r\n                        var albumName = metadata.album || 'Unknown Album';\r\n\r\n\r\n                        var album = new Album(albumName);\r\n\r\n                        artist.addAlbum(album);\r\n                        \r\n                        album.addTrack(track);\r\n                        foundTracks.push(track);\r\n                    });\r\n                })\r\n            });\r\n        }\r\n    }, 500)\r\n    $scope.$watch('searchKeyword', function(newVal, oldVal) {\r\n        if (newVal != oldVal) {\r\n            deboucned(newVal);\r\n\r\n        }\r\n\r\n\r\n    })\r\n    $scope.itemApi = {\r\n        openListContextMenu: function(event, track) {\r\n            var scope = $scope.$new();\r\n            scope.selectedTrack = track;\r\n\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/track_list/listContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        goToAlbum: function(track) {\r\n            library.setOpenAlbum(track.album);\r\n            $scope.navigator.openAlbum = true;\r\n        },\r\n        name: 'cloud'\r\n    }\r\n    $scope.playTrack = function(track) {\r\n\r\n        library.playTrack(track);\r\n        if (library.getQueue() != $scope.cloud.tracks) {\r\n            library.setQueue($scope.cloud.tracks);\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').controller('cloudsCtrl', function($scope, library){\r\n\t$scope.clouds = library.getClouds();\r\n    $scope.itemApi = {\r\n    \topen: function(cloud) {\r\n    \t\tlibrary.setOpenCloud(cloud);\r\n    \t\t$scope.navigator.openCloud = true;\r\n    \t},\r\n        filter: function() {\r\n            var keyword = \"\";\r\n            var items = undefined;\r\n            if($scope.search && $scope.search.cloudsSearch) {\r\n                keyword = $scope.search.cloudsSearch.toLowerCase();               \r\n\r\n                items = $scope.clouds.filter(function(item){\r\n                    return item.name.toLowerCase().indexOf(keyword) != -1;\r\n                })\r\n                \r\n            } \r\n            return items;\r\n        },\r\n    };\r\n})","angular.module('sp-app').controller('mediaSourceCtrl', function ($scope, localStorage, googleDrive, dropbox, oneDrive, vkontakte, spotify, library, mediaSources) {\r\n    // $scope.localFolders = localStorage.getFolders();\r\n    $scope.localFolders = localStorage.getFolders();\r\n\r\n    $scope.$watch(\r\n        function () {\r\n            return library.getClouds().length;\r\n        },\r\n        function () {\r\n\r\n            $scope.gdrive = library.getCloudByName(\"Google Drive\");\r\n            $scope.dropbox = library.getCloudByName(\"Dropbox\");\r\n            $scope.vkontakte = library.getCloudByName(\"Vkontakte\");\r\n            $scope.spotify = library.getCloudByName(\"Spotify\");\r\n            $scope.oneDrive = library.getCloudByName(\"One Drive\");\r\n        })\r\n    $scope.$on('storage-added', function (event, musicStorage) {\r\n        $scope.navigator.openMediaSource = false;\r\n        library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n    })\r\n    $scope.$on('temp-storage-added', function (event, musicStorage) {\r\n        $scope.navigator.queueOpen = true;\r\n        library.temporary.addMusicFiles(musicStorage.musicFiles, musicStorage.source, true);\r\n    })\r\n    $scope.addLocalFolder = function () {\r\n\r\n        localStorage.addFolder();\r\n\r\n    }\r\n\r\n    $scope.scanLibrary = function () {\r\n        localStorage.scanMediaDevices(\"yes\").then(function(musicStorage) {\r\n            library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n        });\r\n      \r\n      \r\n    }\r\n    $scope.removeLocalFolder = function (folder) {\r\n        localStorage.removeFolder(folder);\r\n    }\r\n    $scope.removeCloud = function (cloud) {\r\n        if (cloud.name === \"Google Drive\") {\r\n            googleDrive.remove();\r\n        }\r\n        if (cloud.name === \"Dropbox\") {\r\n            dropbox.remove();\r\n        }\r\n        if (cloud.name === \"Vkontakte\") {\r\n            vkontakte.remove();\r\n        }\r\n        if (cloud.name === \"Spotify\") {\r\n            spotify.remove();\r\n        }\r\n        if (cloud.name === \"One Drive\") {\r\n            oneDrive.remove();\r\n        }\r\n        library.removeCloud(cloud);\r\n    }\r\n    $scope.enableGoogleDrive = function () {\r\n        googleDrive.initDrive().then(function (musicStorage) {\r\n            $scope.navigator.openMediaSource = false;\r\n            library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n        });\r\n    };\r\n    $scope.enableDropbox = function () {\r\n        dropbox.initDrive().then(function (musicStorage) {\r\n\r\n            $scope.navigator.openMediaSource = false;\r\n            library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n        });\r\n    }\r\n    $scope.enableVkontakte = function () {\r\n        vkontakte.initDrive().then(function (musicStorage) {\r\n            $scope.navigator.openMediaSource = false;\r\n            library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n        });\r\n    }\r\n    $scope.enableSpotify = function () {\r\n        spotify.initDrive().then(function (musicStorage) {\r\n            $scope.navigator.openMediaSource = false;\r\n            library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n        });\r\n    }\r\n    $scope.enableOneDrive = function () {\r\n        oneDrive.initDrive().then(function (musicStorage) {\r\n            $scope.navigator.openMediaSource = false;\r\n            library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n        });\r\n    }\r\n\r\n})\r\n","/// <reference path=\"../../../vendor/angular/angular.js\" />\r\nangular.module('sp-app').controller('menuCtrl', function($scope, dialogManager, windowManager) {\r\n\r\n    $scope.openMediaSources = function() {\r\n        $scope.navigator.openMainMenu = false;\r\n        $scope.navigator.queueOpen = false;\r\n        $scope.navigator.openMediaSource = true;\r\n    };\r\n\r\n    $scope.openSettings = function() {\r\n        $scope.navigator.openMainMenu = false;\r\n        $scope.navigator.queueOpen = false;\r\n        $scope.navigator.openSettings = true;\r\n    };\r\n    \r\n    $scope.openAboutDialog = function() {\r\n\r\n        $scope.navigator.openMainMenu = false;\r\n        \r\n        windowManager.createWindow('about.html', {\r\n            'id': 'about',           \r\n            'width': 380,\r\n            'height': 540,\r\n            // screenshots\r\n            // 'width': 1335,\r\n            // 'height': 834,\r\n            // 'minWidth': 380,\r\n            // 'minHeight': 540,\r\n            // 'maxWidth': 380,\r\n            // 'maxHeight': 540\r\n        });\r\n    };\r\n\r\n    $scope.openFeedbackDialog = function() {\r\n        $scope.navigator.openMainMenu = false;\r\n        windowManager.createWindow('feedback.html', {\r\n            'id': 'report',            \r\n            'width': 380,\r\n            'height': 540,\r\n            // screenshots\r\n            // 'width': 1335,\r\n            // 'height': 834,\r\n            'minWidth': 380,\r\n            'minHeight': 540,\r\n            'maxWidth': 380,\r\n            'maxHeight': 540\r\n\r\n        });\r\n\r\n    };\r\n    $scope.$on('global-mouse-click', function(event) {\r\n        $scope.navigator.openMainMenu = false;\r\n    });\r\n\r\n});\r\n","angular.module('sp-app').controller('nowPlayingCtrl', function($scope, library, player) {\r\n    $scope.$watch(function() {\r\n        return library.getCurrentTrack();\r\n    }, function() {\r\n\r\n        $scope.track = library.getCurrentTrack();\r\n    })\r\n    $scope.timerReversed = true;\r\n    $scope.toggleReverse = function(){\r\n    \t$scope.timerReversed = !$scope.timerReversed;\r\n    }\r\n    $scope.getQueue = function() {\r\n        return library.getQueue();\r\n    }\r\n}).directive('currentTime', function(player, $filter) {\r\n    return function($scope, $elem) {\r\n        player.onTimeUpdate(function() {\r\n            var duration = $filter('duration')(player.getCurrentTime($scope.timerReversed));\r\n            var durationArray = duration.split('');\r\n            \r\n            \r\n            $elem[0].children[0].className = durationArray[0];\r\n            $elem[0].children[1].className = durationArray[1];\r\n\r\n            $elem[0].children[2].className = \"dur_separator\";\r\n\r\n            $elem[0].children[3].className = durationArray[3];\r\n            $elem[0].children[4].className = durationArray[4];\r\n\r\n            // $elem[0].textContent = $filter('duration')(player.getCurrentTime($scope.timerReversed));\r\n        });\r\n        \r\n    }\r\n});\r\n","angular.module('sp-app').controller(\"playbackCtrl\", function($scope, player, library, configFactory, dialogManager, toast, localStorage) {\r\n\r\n    // $scope.$watch(function() {\r\n    //     return library.getRepeatMode();\r\n    // }, function() {\r\n\r\n    //     $scope.repeatMode = library.getRepeatMode();\r\n\r\n    // })\r\n    // $scope.$watch(function() {\r\n    //     return library.getShuffle();\r\n    // }, function() {\r\n\r\n    //     $scope.shuffle = library.getShuffle();\r\n    // })\r\n    $scope.$on('play-pause', function() {\r\n        $scope.playPause();\r\n    })\r\n    $scope.isPlaying = function() {\r\n        return player.isPlaying();\r\n    }\r\n    $scope.playPause = function() {\r\n       \r\n        if(library.getTracks().length ==0 && library.temporary.getTempTracks().length == 0) {            \r\n            $scope.navigator.openMainMenu = false;\r\n            $scope.navigator.queueOpen = false;\r\n            $scope.navigator.openMediaSource = true;\r\n            return;\r\n        }\r\n\r\n        if ($scope.isPlaying()) {\r\n            player.pause();\r\n        } else {\r\n            if(!library.getCurrentTrack()) {\r\n                var tracks = library.getTracks().concat(library.temporary.getTempTracks());\r\n                if (library.getQueue() != $scope.items) {\r\n                    library.setQueue(tracks);\r\n                }\r\n                library.loadTrack(tracks[0]);\r\n            }\r\n            player.play();\r\n        }\r\n\r\n    }\r\n    $scope.nextTrack = function() {\r\n        library.nextTrack();\r\n    }\r\n    $scope.prevTrack = function() {\r\n\r\n        library.prevTrack();\r\n    }\r\n    $scope.toggleRepeatMode = function() {\r\n\r\n\r\n        var mode = ((($scope.playback.repeat + 1) % 3) + 3) % 3;\r\n        $scope.playback.repeat = mode;\r\n\r\n    }\r\n    $scope.toggleShuffle = function() {\r\n        $scope.playback.shuffle = !$scope.playback.shuffle;\r\n    }\r\n    $scope.playBtnTitle = function() {\r\n\r\n        if (player.isPlaying()) {\r\n            return \"Pause\";\r\n        } else {\r\n            return \"Play\";\r\n        }\r\n    }\r\n    $scope.repeatBtnTitle = function() {\r\n        if ($scope.playback) {\r\n            if ($scope.playback.repeat == player.repeatModes.repeatOne) {\r\n                return \"Repeat One\";\r\n            } else if ($scope.playback.repeat == player.repeatModes.repeatAll) {\r\n                return \"Repeat All\";\r\n            } else {\r\n                return \"Repeat Off\";\r\n            }\r\n        }\r\n    }\r\n$scope.shuffleBtnTitle = function() {\r\n        if($scope.playback) {\r\n            if($scope.playback.shuffle) {\r\n                \r\n                return \"Turn Shuffle Off\";\r\n            } else {\r\n                \r\n                return \"Turn Shuffle On\";\r\n            }\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').controller(\"createNewPlaylistCtrl\", function($scope, library, $interval, Playlist) {\r\n\r\n    $scope.playlistName = \"\";\r\n    $scope.savePlaylist = function() {\r\n        if ($scope.playlistName.trim().length != 0) {\r\n            var playlist = new Playlist($scope.playlistName);\r\n            playlist.addTrack($scope.selectedTrack);\r\n            if(library.addPlaylist(playlist)) {\r\n                $scope.closeDialog();\r\n            }\r\n            \r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').controller(\"playlistCtrl\", function($scope, library, dialogManager){\r\n\t\r\n    $scope.$watch(function() {\r\n        return library.getOpenPlaylist();\r\n    }, function() {    \t\r\n    \t$scope.playlist = library.getOpenPlaylist();      \r\n    })\r\n\r\n    $scope.itemApi = {\r\n        openListContextMenu: function(event, track) {\r\n            var scope = $scope.$new();\r\n            scope.selectedTrack = track;\r\n            scope.removeFromPlaylist = function() {\r\n                library.removeFromPlaylist(scope.selectedTrack, $scope.playlist);\r\n            }\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/track_list/listContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        goToAlbum: function(track) {\r\n            library.setOpenAlbum(track.album);\r\n            $scope.navigator.openAlbum = true;\r\n        },\r\n        name: 'playlist'\r\n    }\r\n    $scope.playTrack = function(track) {\r\n\r\n        library.playTrack(track);\r\n        if (library.getQueue() != $scope.tracks) {\r\n            library.setQueue($scope.tracks);\r\n        }\r\n    }\r\n    \r\n})","angular.module('sp-app').controller('playlistsCtrl', function($scope, library, dialogManager){\r\n\t$scope.playlists = library.getPlaylists();\r\n    $scope.itemApi = {\r\n    \topen: function(playlist){\r\n    \t\t\r\n    \t\tlibrary.setOpenPlaylist(playlist);\r\n    \t\t$scope.navigator.openPlaylist = true;\r\n    \t},\r\n        openListContextMenu: function(event, playlist) {\r\n            var scope = $scope.$new();\r\n            scope.selectedItem = playlist;\r\n            scope.removePlaylist = function() {\r\n                library.removePlaylist(scope.selectedItem);\r\n            }\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/grid_view/gridContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        filter: function() {\r\n            var keyword = \"\";\r\n            var items = undefined;\r\n            if($scope.search && $scope.search.playlistsSearch) {\r\n                keyword = $scope.search.playlistsSearch.toLowerCase();               \r\n\r\n                items = $scope.playlists.filter(function(item){\r\n                    return item.name.toLowerCase().indexOf(keyword) != -1;\r\n                })\r\n                \r\n            } \r\n            return items;\r\n        },\r\n        name: 'playlists'\r\n    }\r\n    \r\n})","angular.module('sp-app').controller('queueCtrl', function($scope, library, Playlist, dialogManager, playlistsRepository, tracksRepository) {\r\n    var self = this;\r\n    \r\n    $scope.$watch(function() {\r\n            return library.getQueue().length;\r\n        }, function() {\r\n            $scope.tracks = library.getQueue();\r\n            \r\n        })\r\n       \r\n    \r\n    $scope.savePlaylist = function(playlistObj) {\r\n        if (playlistObj.playlistName) {           \r\n            var playlist = new Playlist(playlistObj.playlistName);\r\n\r\n            $scope.tracks.forEach(function(track) {\r\n                playlist.addTrack(track);\r\n            })\r\n\r\n            library.addPlaylist(playlist);\r\n            playlistObj.playlistName = \"\";\r\n        }\r\n    }\r\n    $scope.itemApi = {\r\n        openListContextMenu: function(event, track) {\r\n            var scope = $scope.$new();\r\n            scope.selectedTrack = track;\r\n\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/track_list/listContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        goToAlbum: function(track) {\r\n            library.setOpenAlbum(track.album);\r\n            $scope.navigator.openAlbum = true;\r\n        },\r\n        name: 'queue'\r\n    }\r\n    $scope.playTrack = function(track) {\r\n\r\n        library.playTrack(track);\r\n        if (library.getQueue() != $scope.tracks) {\r\n            library.setQueue($scope.tracks);\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').controller('quickActionsCtrl', function($scope) {\r\n    $scope.openMediaSources = function() {\r\n        $scope.navigator.openMainMenu = false;\r\n        $scope.navigator.queueOpen = false;\r\n        $scope.navigator.openMediaSource = true;\r\n    };\r\n})","angular.module('sp-app').controller('searchCtrl', function($scope, library, dialogManager) {\r\n    $scope.$watch(function() {\r\n        return library.getSearchResult();\r\n    }, function(result) {\r\n    \titems = [];\r\n        if (result) {\r\n            \r\n            result.artists.forEach(function(artist) {\r\n                artist.albums.forEach(function(album) {\r\n                    album.tracks.forEach(function(track) {\r\n                        items.push(track);\r\n                    })\r\n                });\r\n            });\r\n            result.albums.forEach(function(album) {\r\n                album.tracks.forEach(function(track) {\r\n                    if (items.indexOf(track) == -1)\r\n                        items.push(track);\r\n                })\r\n            });\r\n            result.songs.forEach(function(track) {\r\n                if (items.indexOf(track) == -1)\r\n                    items.push(track);\r\n            })\r\n        }\r\n        $scope.searchResult = items;\r\n\r\n    });\r\n    \r\n     $scope.itemApi = {\r\n        openListContextMenu: function(event, track) {\r\n            var scope = $scope.$new();\r\n            scope.selectedTrack = track;\r\n\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/track_list/listContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        goToAlbum: function(track) {\r\n            library.setOpenAlbum(track.album);\r\n            $scope.navigator.openAlbum = true;\r\n        },\r\n        name: 'songs',\r\n        incomingEvent: true\r\n    }\r\n    $scope.playTrack = function(track) {\r\n\r\n        library.playTrack(track);\r\n        if (library.getQueue() != $scope.tracks) {\r\n            library.setQueue($scope.searchResult);\r\n        }\r\n    }\r\n})\r\n","angular.module('sp-app').controller('settingsCtrl', function($scope, library, toast,  googleDrive, dropbox, vkontakte, spotify, localStorage, storage) {\r\n    $scope.$watch('settings.alwaysTop', function(newVal, oldVal) {\r\n        if (oldVal != newVal) {\r\n            chrome.app.window.current().setAlwaysOnTop(newVal);\r\n        }\r\n    })\r\n    $scope.resetSettings = function() {\r\n\r\n        $scope.settings.autoPlay = false;\r\n        $scope.settings.showAlbumArt = true;\r\n        $scope.settings.alwaysTop = false;\r\n        $scope.settings.theme = 'primary.css';\r\n\r\n    }\r\n    $scope.clearData = function() {\r\n\r\n        googleDrive.remove();\r\n\r\n        dropbox.remove();\r\n\r\n        vkontakte.remove();\r\n\r\n        // spotify.remove();\r\n        localStorage.getFolders().forEach(function(folder) {\r\n            localStorage.removeFolder(folder);\r\n        });\r\n        library.removePlaylists();\r\n\r\n        library.removeAllClouds();\r\n        storage.remove('localFilePaths')\r\n        toast.show({content: \"The data has been removed\"})\r\n    }\r\n})\r\n","angular.module('sp-app').controller('songsCtrl', function($scope, library, dialogManager, localStorage, searchService) {\r\n\r\n  \r\n    $scope.tracks = filter(library.getTracks());\r\n\r\n    $scope.$watch('search.songsSearch', function(newVal, oldVal) {\r\n        if(newVal != oldVal) {\r\n                $scope.tracks = filter(library.getTracks());\r\n        }\r\n    })\r\n    function filter() {        \r\n            var keyword = \"\";\r\n            var items = undefined;\r\n            if($scope.search && $scope.search.songsSearch) {\r\n                var keyword = $scope.search.songsSearch;\r\n                var artistsResult = searchService.search(library.getArtists(), keyword, \"name\");\r\n                var albumsResult = searchService.search(library.getAlbums(), keyword, \"name\");\r\n                var songsResult = searchService.search(library.getTracks(), keyword, \"title\");\r\n                items = [];\r\n                searchResult = {\r\n                    artists: artistsResult,\r\n                    albums: albumsResult,\r\n                    songs: songsResult\r\n                }\r\n               \r\n                searchResult.artists.forEach(function(artist) {\r\n                artist.albums.forEach(function(album) {\r\n                    album.tracks.forEach(function(track) {\r\n                        items.push(track);\r\n                    })\r\n                });\r\n                });\r\n                searchResult.albums.forEach(function(album) {\r\n                    album.tracks.forEach(function(track) {\r\n                        if (items.indexOf(track) == -1)\r\n                            items.push(track);\r\n                    })\r\n                });\r\n                searchResult.songs.forEach(function(track) {\r\n                    if (items.indexOf(track) == -1)\r\n                        items.push(track);\r\n                })\r\n\r\n            }\r\n            if(items) {\r\n                return items;\r\n            } else {\r\n                return library.getTracks();\r\n            }\r\n            \r\n        }\r\n    $scope.itemApi = {\r\n        openListContextMenu: function(event, track) {\r\n            var scope = $scope.$new();\r\n            scope.selectedTrack = track;\r\n\r\n            dialogManager.openDialog({\r\n                template: \"app/controls/track_list/listContextMenu.html\",\r\n                x: event.pageX,\r\n                y: event.pageY,\r\n                scope: scope,\r\n                autoClose: true\r\n            });\r\n        },\r\n        goToAlbum: function(track) {\r\n            library.setOpenAlbum(track.album);\r\n            $scope.navigator.openAlbum = true;\r\n        },\r\n      \r\n        incomingEvent: true,\r\n        name: 'songs'\r\n    }\r\n    $scope.playTrack = function(track) {\r\n\r\n        library.playTrack(track);\r\n        if (library.getQueue() != $scope.tracks) {\r\n            library.setQueue($scope.tracks);\r\n        }\r\n    }\r\n    $scope.scanLibrary = function() {\r\n        localStorage.scanMediaDevices(\"yes\").then(function(musicStorage) {\r\n            library.addMusicFiles(musicStorage.musicFiles, musicStorage.source);\r\n\r\n        });\r\n    }\r\n});\r\n","/// <reference path=\"../../../vendor/angular/angular.js\" />\r\nangular.module('sp-app').controller('tabCtrl', function ($scope) {\r\n    \r\n    $scope.setCurrentView = function (view) {\r\n        $scope.navigator.currentView = view;       \r\n    };\r\n    $scope.getCurrentView = function(){\r\n        return $scope.navigator.currentView;\r\n    }\r\n\r\n});","angular.module('sp-app').controller(\"updateDialogCtrl\", function($scope) {    \r\n   $scope.installUpdate = function() {     \r\n       var shell = require(\"electron\").shell;\r\n       shell.openItem($scope.packagePath);\r\n       $scope.closeApp();\r\n\r\n   }\r\n})"]}